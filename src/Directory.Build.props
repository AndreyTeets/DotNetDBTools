<Project>

  <Import Project="..\Directory.Build.props" />

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Deterministic>true</Deterministic>
    <IsPackable>true</IsPackable>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <EmbedAllSources>true</EmbedAllSources>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <DebugType>portable</DebugType>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageId>$(AssemblyName)</PackageId>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/AndreyTeets/DotNetDBTools</PackageProjectUrl>
    <RepositoryUrl>>https://github.com/AndreyTeets/DotNetDBTools.git</RepositoryUrl>
    <PackageTags>DNDBT DBMS sql state-based declarative database version control tools db migration</PackageTags>
    <Description>
DotNetDBTools is a set of libraries to define, analyze and deploy (publish migrate) relational databases throughout their evolution using database as code approach.
Or in other words - state-based (declarative) database version control tools.
It provides the means to conviniently describe database structure for the supported DBMS as c# code or as sql in a declarative way, to analyze that structure and the means of publishing it to the selected DBMS with automatic differences calculation between what's being published and what's currently in the DBMS now.
Agnostic description for standard sql objects (Tables, Views, Indexes, Triggers) is also supported (as c# code only) and can then be used to publish to any supported DBMS.
    </Description>
    <Authors>Andrey Teets</Authors>
    <Copyright>Copyright (c) 2021 Andrey Teets</Copyright>
    <PackageOutputPath>$(MSBuildThisFileDirectory)..\artifacts\nuget\$(Configuration)</PackageOutputPath>
  </PropertyGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="DotNetDBTools.AnalyzersTests" />
    <InternalsVisibleTo Include="DotNetDBTools.IntegrationTests" />
    <InternalsVisibleTo Include="DotNetDBTools.UnitTests" />
    <InternalsVisibleTo Include="DynamicProxyGenAssembly2" />
  </ItemGroup>

  <PropertyGroup Condition="'$(CI_BUILD)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>

</Project>