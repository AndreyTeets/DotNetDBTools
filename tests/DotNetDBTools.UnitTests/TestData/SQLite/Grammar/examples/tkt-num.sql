-- ===tkt1435.test===
CREATE TABLE Instances(
instanceId INTEGER PRIMARY KEY,
troveName STR,
versionId INT,
flavorId INT,
timeStamps STR,
isPresent INT,
pinned BOOLEAN
);
INSERT INTO "Instances"
VALUES(1, 'libhello:runtime', 1, 1, 1126929880.094, 1, 1);
INSERT INTO "Instances"
VALUES(2, 'libhello:user', 1, 1, 1126929880.094, 1, 0);
INSERT INTO "Instances"
VALUES(3, 'libhello:script', 1, 1, 1126929880.094, 1, 0);
INSERT INTO "Instances"
VALUES(4, 'libhello', 1, 1, 1126929880.094, 1, 0);
CREATE TABLE Versions(versionId INTEGER PRIMARY KEY,version STR UNIQUE);
INSERT INTO "Versions" VALUES(0, NULL);
INSERT INTO "Versions" VALUES(1, '/localhost@rpl:linux/0-1-1');
CREATE TABLE Flavors(flavorId integer primary key, flavor str unique);
INSERT INTO "Flavors" VALUES(0, NULL);
INSERT INTO "Flavors" VALUES(1, '1#x86');
CREATE TEMPORARY TABLE tlList (
row INTEGER PRIMARY KEY,
name STRING,
version STRING,
flavor STRING
);
INSERT INTO tlList 
values(NULL, 'libhello:script', '/localhost@rpl:linux/0-1-1', '1#x86');
INSERT INTO tlList 
values(NULL, 'libhello:user', '/localhost@rpl:linux/0-1-1', '1#x86');
INSERT INTO tlList 
values(NULL, 'libhello:runtime', '/localhost@rpl:linux/0-1-1', '1#x86');

select row, pinned from tlList, Instances, Versions, Flavors
where
Instances.troveName = tlList.name
and Versions.version = tlList.version
and Instances.versionId = Versions.versionId
and (    Flavors.flavor = tlList.flavor or Flavors.flavor is NULL
and tlList.flavor = '')
and Instances.flavorId = Flavors.flavorId
order by row asc;

CREATE INDEX InstancesNameIdx ON Instances(troveName);
CREATE UNIQUE INDEX InstancesIdx 
ON Instances(troveName, versionId, flavorId);
ANALYZE;
select row, pinned from tlList, Instances, Versions, Flavors
where
Instances.troveName = tlList.name
and Versions.version = tlList.version
and Instances.versionId = Versions.versionId
and (    Flavors.flavor = tlList.flavor or Flavors.flavor is NULL
and tlList.flavor = '')
and Instances.flavorId = Flavors.flavorId
order by row asc;

-- ===tkt1443.test===
CREATE TABLE Items(
itemId integer primary key,
item str unique
);
INSERT INTO "Items" VALUES(0, 'ALL');
INSERT INTO "Items" VALUES(1, 'double:source');
INSERT INTO "Items" VALUES(2, 'double');
INSERT INTO "Items" VALUES(3, 'double:runtime');
INSERT INTO "Items" VALUES(4, '.*:runtime');
CREATE TABLE Labels(
labelId INTEGER PRIMARY KEY,
label STR UNIQUE
);
INSERT INTO "Labels" VALUES(0, 'ALL');
INSERT INTO "Labels" VALUES(1, 'localhost@rpl:linux');
INSERT INTO "Labels" VALUES(2, 'localhost@rpl:branch');
CREATE TABLE LabelMap(
itemId INTEGER,
labelId INTEGER,
branchId integer
);
INSERT INTO "LabelMap" VALUES(1, 1, 1);
INSERT INTO "LabelMap" VALUES(2, 1, 1);
INSERT INTO "LabelMap" VALUES(3, 1, 1);
INSERT INTO "LabelMap" VALUES(1, 2, 2);
INSERT INTO "LabelMap" VALUES(2, 2, 3);
INSERT INTO "LabelMap" VALUES(3, 2, 3);
CREATE TABLE Users (
userId INTEGER PRIMARY KEY,
user STRING UNIQUE,
salt BINARY,
password STRING
);
INSERT INTO "Users" VALUES(1, 'test', 'æd',
'43ba0f45014306bd6df529551ffdb3df');
INSERT INTO "Users" VALUES(2, 'limited', 'ª>S',
'cf07c8348fdf675cc1f7696b7d45191b');
CREATE TABLE UserGroups (
userGroupId INTEGER PRIMARY KEY,
userGroup STRING UNIQUE
);
INSERT INTO "UserGroups" VALUES(1, 'test');
INSERT INTO "UserGroups" VALUES(2, 'limited');
CREATE TABLE UserGroupMembers (
userGroupId INTEGER,
userId INTEGER
);
INSERT INTO "UserGroupMembers" VALUES(1, 1);
INSERT INTO "UserGroupMembers" VALUES(2, 2);
CREATE TABLE Permissions (
userGroupId INTEGER,
labelId INTEGER NOT NULL,
itemId INTEGER NOT NULL,
write INTEGER,
capped INTEGER,
admin INTEGER
);
INSERT INTO "Permissions" VALUES(1, 0, 0, 1, 0, 1);
INSERT INTO "Permissions" VALUES(2, 2, 4, 0, 0, 0);

select distinct
Items.Item as trove, UP.pattern as pattern
from
( select
Permissions.labelId as labelId,
PerItems.item as pattern
from
Users, UserGroupMembers, Permissions
left outer join Items as PerItems
on Permissions.itemId = PerItems.itemId
where
Users.user = 'limited'
and Users.userId = UserGroupMembers.userId
and UserGroupMembers.userGroupId = Permissions.userGroupId
) as UP join LabelMap on ( UP.labelId = 0 or
UP.labelId = LabelMap.labelId ),
Labels, Items
where
Labels.label = 'localhost@rpl:branch'
and Labels.labelId = LabelMap.labelId
and LabelMap.itemId = Items.itemId
ORDER BY +trove, +pattern;

CREATE UNIQUE INDEX PermissionsIdx
ON Permissions(userGroupId, labelId, itemId);
select distinct
Items.Item as trove, UP.pattern as pattern
from
( select
Permissions.labelId as labelId,
PerItems.item as pattern
from
Users, UserGroupMembers, Permissions
left outer join Items as PerItems
on Permissions.itemId = PerItems.itemId
where
Users.user = 'limited'
and Users.userId = UserGroupMembers.userId
and UserGroupMembers.userGroupId = Permissions.userGroupId
) as UP join LabelMap on ( UP.labelId = 0 or
UP.labelId = LabelMap.labelId ),
Labels, Items
where
Labels.label = 'localhost@rpl:branch'
and Labels.labelId = LabelMap.labelId
and LabelMap.itemId = Items.itemId
ORDER BY +trove, +pattern;

-- ===tkt1444.test===
CREATE TABLE DemoTable (x INTEGER, TextKey TEXT, DKey Real);
CREATE INDEX DemoTableIdx ON DemoTable (TextKey);
INSERT INTO DemoTable VALUES(9,8,7);
INSERT INTO DemoTable VALUES(1,2,3);
CREATE VIEW DemoView AS SELECT * FROM DemoTable ORDER BY TextKey;
SELECT * FROM DemoTable UNION ALL SELECT * FROM DemoView ORDER BY 1;

SELECT * FROM DemoTable UNION ALL SELECT * FROM DemoView;

DROP VIEW DemoView;
CREATE VIEW DemoView AS SELECT * FROM DemoTable;
SELECT * FROM DemoTable UNION ALL SELECT * FROM DemoView ORDER BY 1;

SELECT * FROM DemoTable UNION ALL SELECT * FROM DemoView;

-- ===tkt1449.test===
BEGIN;
CREATE TABLE ACLS(ISSUEID text(50) not null, OBJECTID text(50) not null, PARTICIPANTID text(50) not null, PERMISSIONBITS int not null, constraint PK_ACLS primary key (ISSUEID, OBJECTID, PARTICIPANTID));
CREATE TABLE ACTIONITEMSTATUSES(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, FRIENDLYNAME text(100) not null, REVISION int not null, SHORTNAME text(30) not null, LONGNAME text(200) not null, ATTACHMENTHANDLING int not null, RESULT int not null, NOTIFYCREATOR text(1) null, NOTIFYASSIGNEE text(1) null, NOTIFYFYI text(1) null, NOTIFYCLOSURETEAM text(1) null, NOTIFYCOORDINATORS text(1) null, COMMENTREQUIRED text(1) not null, constraint PK_ACTIONITEMSTATUSES primary key (ISSUEID, OBJECTID));
CREATE TABLE ACTIONITEMTYPES(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, REVISION int not null, LABEL text(200) not null, INSTRUCTIONS text not null, EMAILINSTRUCTIONS text null, ALLOWEDSTATUSES text not null, INITIALSTATUS text(100) not null, COMMENTREQUIRED text(1) not null, ATTACHMENTHANDLING int not null, constraint PK_ACTIONITEMTYPES primary key (ISSUEID, OBJECTID));
CREATE TABLE ATTACHMENTS(TQUNID text(36) not null, OBJECTID text(50) null, ISSUEID text(50) null, DATASTREAM blob not null, CONTENTENCODING text(50) null, CONTENTCHARSET text(50) null, CONTENTTYPE text(100) null, CONTENTID text(100) null, CONTENTLOCATION text(100) null, CONTENTNAME text(100) not null, constraint PK_ATTACHMENTS primary key (TQUNID));
CREATE TABLE COMPLIANCEPOLICIES(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, BODY text null, constraint PK_COMPLIANCEPOLICIES primary key (ISSUEID, OBJECTID));
CREATE TABLE DBHISTORY(DATETIME text(25) not null, OPERATION text(20) not null, KUBIVERSION text(100) not null, FROMVERSION int null, TOVERSION int null);
CREATE TABLE DBINFO(FINGERPRINT text(32) not null, VERSION int not null);
CREATE TABLE DETACHEDATTACHMENTS (TQUNID text(36) not null, ISSUEID text(50) not null, OBJECTID text(50) not null, PATH text(300) not null, DETACHEDFILELASTMODTIMESTAMP text(25) null, CONTENTID text(100) not null, constraint PK_DETACHEDATTACHMENTS primary key (TQUNID));
CREATE TABLE DOCREFERENCES(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, REFERENCEDOCUMENTID text(50) null, constraint PK_DOCREFERENCES primary key (ISSUEID, OBJECTID));
CREATE TABLE DQ (TQUNID text(36) not null, ISSUEID text(50) not null, DEPENDSID text(50) null, DEPENDSTYPE int null, DEPENDSCOMMANDSTREAM blob null, DEPENDSNODEIDSEQNOKEY text(100) null, DEPENDSACLVERSION int null, constraint PK_DQ primary key (TQUNID));
CREATE TABLE EMAILQ(TIMEQUEUED int not null, NODEID text(50) not null, MIME blob not null, TQUNID text(36) not null);
CREATE TABLE ENTERPRISEDATA(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, DATE1 text(25) null, DATE2 text(25) null, DATE3 text(25) null, DATE4 text(25) null, DATE5 text(25) null, DATE6 text(25) null, DATE7 text(25) null, DATE8 text(25) null, DATE9 text(25) null, DATE10 text(25) null, VALUE1 int null, VALUE2 int null, VALUE3 int null, VALUE4 int null, VALUE5 int null, VALUE6 int null, VALUE7 int null, VALUE8 int null, VALUE9 int null, VALUE10 int null, VALUE11 int null, VALUE12 int null, VALUE13 int null, VALUE14 int null, VALUE15 int null, VALUE16 int null, VALUE17 int null, VALUE18 int null, VALUE19 int null, VALUE20 int null, STRING1 text(300) null, STRING2 text(300) null, STRING3 text(300) null, STRING4 text(300) null, STRING5 text(300) null, STRING6 text(300) null, STRING7 text(300) null, STRING8 text(300) null, STRING9 text(300) null, STRING10 text(300) null, LONGSTRING1 text null, LONGSTRING2 text null, LONGSTRING3 text null, LONGSTRING4 text null, LONGSTRING5 text null, LONGSTRING6 text null, LONGSTRING7 text null, LONGSTRING8 text null, LONGSTRING9 text null, LONGSTRING10 text null, constraint PK_ENTERPRISEDATA primary key (ISSUEID, OBJECTID));
CREATE TABLE FILEMORGUE(TQUNID text(36) not null, PATH text(300) not null, DELETEFOLDERWHENEMPTY text(1) null, constraint PK_FILEMORGUE primary key (TQUNID));
CREATE TABLE FILES(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, PARENTENTITYID text(50) null, BODY text null, BODYCONTENTTYPE text(100) null, ISOBSOLETE text(1) null, FILENAME text(300) not null, VISIBLENAME text(300) not null, VERSIONSTRING text(300) not null, DOCUMENTHASH text(40) not null, ISFINAL text(1) null, DOCREFERENCEID text(50) not null, constraint PK_FILES primary key (ISSUEID, OBJECTID));
CREATE TABLE FOLDERS(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, CONTAINERNAME text(300) null, CONTAINERACLSETTINGS text null, constraint PK_FOLDERS primary key (ISSUEID, OBJECTID));
CREATE TABLE GLOBALSETTINGS(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, SINGULARPROJECTLABEL text(30) not null, PLURALPROJECTLABEL text(30) not null, PROJECTREQUIRED text(1) not null, CUSTOMPROJECTSALLOWED text(1) not null, ACTIONITEMSPECXML text null, PROJECTLISTXML text null, ENTERPRISEDATALABELS text null, ENTERPRISEDATATABXSL text null, constraint PK_GLOBALSETTINGS primary key (ISSUEID, OBJECTID));
CREATE TABLE GLOBALSTRINGPROPERTIES(ID int not null, VALUE text(300) not null, constraint PK_GLOBALSTRINGPROPERTIES primary key (ID));
CREATE TABLE IMQ(TQUNID text(36) not null, DATETIMEQUEUED text(25) not null, ISSUEID text(50) not null, KUBIBUILD text(30) not null, FAILCOUNT int not null, LASTRUN text(25) null, ENVELOPESTREAM blob not null, PAYLOADSTREAM blob not null, constraint PK_IMQ primary key (TQUNID));
CREATE TABLE INVITATIONNODES(INVITATIONID text(50) not null, RECIPIENTNODEID text(50) not null, DATECREATED text(25) not null, constraint PK_INVITATIONNODES primary key (INVITATIONID, RECIPIENTNODEID));
CREATE TABLE INVITATIONS (INVITATIONID text(50) not null, SENDERNODEID text(50) not null, RECIPIENTEMAILADDR text(200) not null, RECIPIENTUSERID text(50) null, RECIPIENTNODES text null, ISSUEID text(50) not null, ENVELOPE text not null, MESSAGEBLOB blob not null, INVITATIONSTATE int not null, TQUNID text(36) not null, DATECREATED text(25) not null);
CREATE TABLE ISSUES (CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, CONTAINERNAME text(300) null, CONTAINERACLSETTINGS text null, ISINITIALIZED text(1) null, BLINDINVITES text null, ISSYSTEMISSUE text(1) not null, ISSUETYPE int not null, ACTIVITYTYPEID text(50) null, ISINCOMPLETE text(1) not null, constraint PK_ISSUES primary key (ISSUEID, OBJECTID));
CREATE TABLE ISSUESETTINGS (CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, ISSUENAME text(300) not null, ISSUEACLSETTINGS text not null, ISSUEDUEDATE text(25) null, ISSUEPRIORITY int null, ISSUESTATUS int null, DESCRIPTION text null, PROJECTID text(100) null, PROJECTNAME text null, PROJECTNAMEISCUSTOM text(1) null, ISSYSTEMISSUE text(1) not null, ACTIONITEMREVNUM int not null, constraint PK_ISSUESETTINGS primary key (ISSUEID, OBJECTID));
CREATE TABLE KMTPMSG (MSGID integer not null, SENDERID text(50) null, RECIPIENTIDLIST text not null, ISSUEID text(50) null, MESSAGETYPE int not null, ENVELOPE text null, MESSAGEBLOB blob not null, RECEIVEDDATE text(25) not null, constraint PK_KMTPMSG primary key (MSGID));
CREATE TABLE KMTPNODEQ(NODEID text(50) not null, MSGID int not null, RECEIVEDDATE text(25) not null, SENDCOUNT int not null);
CREATE TABLE KMTPQ(MSGID integer not null, SENDERID text(50) null, RECIPIENTIDLIST text not null, ISSUEID text(50) null, MESSAGETYPE int not null, ENVELOPE text null, MESSAGEBLOB blob not null, constraint PK_KMTPQ primary key (MSGID));
CREATE TABLE LOGENTRIES(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, PARENTENTITYID text(50) null, BODY text null, BODYCONTENTTYPE text(100) null, ISOBSOLETE text(1) null, ACTIONTYPE int not null, ASSOCIATEDOBJECTIDS text null, OLDENTITIES text null, NEWENTITIES text null, OTHERENTITIES text null, constraint PK_LOGENTRIES primary key (ISSUEID, OBJECTID));
CREATE TABLE LSBI(TQUNID text(36) not null, ISSUEID text(50) not null, TABLEITEMID text(50) null, TABLENODEID text(50) null, TABLECMD int null, TABLECONTAINERID text(50) null, TABLESEQNO int null, DIRTYCONTENT text null, STUBBED text(1) null, ENTITYSTUBDATA text null, UPDATENUMBER int not null, constraint PK_LSBI primary key (TQUNID));
CREATE TABLE LSBN(TQUNID text(36) not null, ISSUEID text(50) not null, NODEID text(50) not null, STORESEQNO int not null, SYNCSEQNO int not null, LASTMSGDATE text(25) null, constraint PK_LSBN primary key (TQUNID));
CREATE TABLE MMQ(TQUNID text(36) not null, ISSUEID text(50) not null, TABLEREQUESTNODE text(50) null, MMQENTRYINDEX text(60) null, DIRECTION int null, NODEID text(50) null, TABLEFIRSTSEQNO int null, TABLELASTSEQNO int null, NEXTRESENDTIMEOUT text(25) null, TABLETIMEOUTMULTIPLIER int null, constraint PK_MMQ primary key (TQUNID));
CREATE TABLE NODEREG(NODEID text(50) not null, USERID text(50) null, CREATETIME text(25) not null, TQUNID text(36) not null);
CREATE TABLE NODES (NODEID text(50) not null, USERID text(50) null, NODESTATE int not null, NODECERT text null, KUBIVERSION int not null, KUBIBUILD text(30) not null, TQUNID text(36) not null, LASTBINDDATE text(25) null, LASTUNBINDDATE text(25) null, LASTBINDIP text(15) null, NUMBINDS int not null, NUMSENDS int not null, NUMPOLLS int not null, NUMRECVS int not null);
CREATE TABLE PARTICIPANTNODES(ISSUEID text(50) not null, OBJECTID text(50) not null, NODEID text(50) not null, USERID text(50) null, NODESTATE int not null, NODECERT text null, KUBIVERSION int not null, KUBIBUILD text(30) not null, TQUNID text(36) not null);
CREATE TABLE PARTICIPANTS(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, PARTICIPANTSTATE int not null, PARTICIPANTROLE int not null, PARTICIPANTTEAM int not null, ISREQUIREDMEMBER text(1) null, USERID text(50) null, ISAGENT text(1) null, NAME text(150) not null, EMAILADDRESS text(200) not null, ISEMAILONLY text(1) not null, INVITATION text null, ACCEPTRESENDCOUNT int null, ACCEPTRESENDTIMEOUT text(25) null, ACCEPTLASTSENTTONODEID text(50) null, constraint PK_PARTICIPANTS primary key (ISSUEID, OBJECTID));
CREATE TABLE PARTICIPANTSETTINGS(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, PARTICIPANTID text(50) not null, TASKPIMSYNC text(1) null, MOBILESUPPORT text(1) null, NOTIFYBYEMAIL text(1) null, MARKEDCRITICAL text(1) null, constraint PK_PARTICIPANTSETTINGS primary key (ISSUEID, OBJECTID));
CREATE TABLE PARTITIONS(PARTITIONID text(50) not null, NAME text(100) not null, LDAPDN text(300) not null, SERVERNODEID text(50) not null, TQUNID text(36) not null);
CREATE TABLE PROJECTS(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, NAME text(100) not null, ID text(100) null, constraint PK_PROJECTS primary key (ISSUEID, OBJECTID));
CREATE TABLE TASKCOMPLETIONS(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, PARENTENTITYID text(50) null, BODY text null, BODYCONTENTTYPE text(100) null, ISOBSOLETE text(1) null, TASKID text(50) not null, DISPOSITION int not null, STATUSID text(50) not null, SHORTNAME text(30) not null, LONGNAME text(200) not null, constraint PK_TASKCOMPLETIONS primary key (ISSUEID, OBJECTID));
CREATE TABLE TASKS(CLASSID int null, SEQNO int not null, LASTMODONNODEID text(50) not null, PREVMODONNODEID text(50) null, ISSUEID text(50) not null, OBJECTID text(50) not null, REVISIONNUM int not null, CONTAINERID text(50) not null, AUTHORID text(50) not null, CREATIONDATE text(25) null, LASTMODIFIEDDATE text(25) null, UPDATENUMBER int null, PREVREVISIONNUM int null, LASTCMD int null, LASTCMDACLVERSION int null, USERDEFINEDFIELD text(300) null, LASTMODIFIEDBYID text(50) null, PARENTENTITYID text(50) null, BODY text null, BODYCONTENTTYPE text(100) null, ISOBSOLETE text(1) null, DUETIME text(25) null, ASSIGNEDTO text(50) not null, TARGETOBJECTIDS text null, RESPONSEID text(50) not null, TYPEID text(50) not null, LABEL text(200) not null, INSTRUCTIONS text not null, ALLOWEDSTATUSES text not null, ISSERIALREVIEW text(1) null, DAYSTOREVIEW int null, REVIEWERIDS text(500) null, REVIEWTYPE int null, REVIEWGROUP text(300) null, constraint PK_TASKS primary key (ISSUEID, OBJECTID));
CREATE TABLE USERS (USERID text(50) not null, USERSID text(100) not null, ENTERPRISEUSER text(1) not null, USEREMAILADDRESS text(200) null, EMAILVALIDATED text(1) null, VALIDATIONCOOKIE text(50) null, CREATETIME text(25) not null, TQUNID text(36) not null, PARTITIONID text(50) null);
CREATE VIEW CRITICALISSUES as 
select
USERID, ISSUEID, ISSUENAME, min(DATE1) DATE1
from (
select p.USERID USERID, p.ISSUEID ISSUEID, iset.ISSUENAME ISSUENAME, t.DUETIME DATE1
from PARTICIPANTS p
join TASKS t on t.ASSIGNEDTO = p.OBJECTID
join TASKCOMPLETIONS tc on tc.TASKID = t.OBJECTID
join ISSUESETTINGS iset on iset.ISSUEID = p.ISSUEID
where (t.ISOBSOLETE = 'n' or t.ISOBSOLETE is null)
and tc.DISPOSITION = 1
and iset.ISSUESTATUS = 1
union
select p.USERID USERID, p.ISSUEID ISSUEID, iset.ISSUENAME ISSUENAME, iset.ISSUEDUEDATE DATE1
from PARTICIPANTS p
join PARTICIPANTSETTINGS ps on ps.PARTICIPANTID = p.OBJECTID
join ISSUESETTINGS iset on iset.ISSUEID = p.ISSUEID
where ps.MARKEDCRITICAL = 'y'
and iset.ISSUESTATUS = 1
) as CRITICALDATA
group by USERID, ISSUEID, ISSUENAME;
CREATE VIEW CURRENTFILES as 
select
d.ISSUEID as ISSUEID,
d.REFERENCEDOCUMENTID as OBJECTID,
f.VISIBLENAME as VISIBLENAME
from
DOCREFERENCES d
join FILES f on f.OBJECTID = d.REFERENCEDOCUMENTID;
CREATE VIEW ISSUEDATA as 
select
ISSUES.OBJECTID as ISSUEID,
ISSUES.CREATIONDATE as CREATIONDATE,
ISSUES.AUTHORID as AUTHORID,
ISSUES.LASTMODIFIEDDATE as LASTMODIFIEDDATE,
ISSUES.LASTMODIFIEDBYID as LASTMODIFIEDBYID,
ISSUESETTINGS.ISSUENAME as ISSUENAME,
ISSUES.ISINITIALIZED as ISINITIALIZED,
ISSUES.ISSYSTEMISSUE as ISSYSTEMISSUE,
ISSUES.ISSUETYPE as ISSUETYPE,
ISSUES.ISINCOMPLETE as ISINCOMPLETE,
ISSUESETTINGS.REVISIONNUM as ISSUESETTINGS_REVISIONNUM,
ISSUESETTINGS.LASTMODIFIEDDATE as ISSUESETTINGS_LASTMODIFIEDDATE,
ISSUESETTINGS.LASTMODIFIEDBYID as ISSUESETTINGS_LASTMODIFIEDBYID,
ISSUESETTINGS.ISSUEDUEDATE as ISSUEDUEDATE,
ISSUESETTINGS.ISSUEPRIORITY as ISSUEPRIORITY,
ISSUESETTINGS.ISSUESTATUS as ISSUESTATUS,
ISSUESETTINGS.DESCRIPTION as DESCRIPTION,
ISSUESETTINGS.PROJECTID as PROJECTID,
ISSUESETTINGS.PROJECTNAME as PROJECTNAME,
ISSUESETTINGS.PROJECTNAMEISCUSTOM as PROJECTNAMEISCUSTOM,
ENTERPRISEDATA.REVISIONNUM as ENTERPRISEDATA_REVISIONNUM,
ENTERPRISEDATA.CREATIONDATE as ENTERPRISEDATA_CREATIONDATE,
ENTERPRISEDATA.AUTHORID as ENTERPRISEDATA_AUTHORID,
ENTERPRISEDATA.LASTMODIFIEDDATE as ENTERPRISEDATA_LASTMODIFIEDDATE,
ENTERPRISEDATA.LASTMODIFIEDBYID as ENTERPRISEDATA_LASTMODIFIEDBYID,
ENTERPRISEDATA.DATE1 as DATE1,
ENTERPRISEDATA.DATE2 as DATE2,
ENTERPRISEDATA.DATE3 as DATE3,
ENTERPRISEDATA.DATE4 as DATE4,
ENTERPRISEDATA.DATE5 as DATE5,
ENTERPRISEDATA.DATE6 as DATE6,
ENTERPRISEDATA.DATE7 as DATE7,
ENTERPRISEDATA.DATE8 as DATE8,
ENTERPRISEDATA.DATE9 as DATE9,
ENTERPRISEDATA.DATE10 as DATE10,
ENTERPRISEDATA.VALUE1 as VALUE1,
ENTERPRISEDATA.VALUE2 as VALUE2,
ENTERPRISEDATA.VALUE3 as VALUE3,
ENTERPRISEDATA.VALUE4 as VALUE4,
ENTERPRISEDATA.VALUE5 as VALUE5,
ENTERPRISEDATA.VALUE6 as VALUE6,
ENTERPRISEDATA.VALUE7 as VALUE7,
ENTERPRISEDATA.VALUE8 as VALUE8,
ENTERPRISEDATA.VALUE9 as VALUE9,
ENTERPRISEDATA.VALUE10 as VALUE10,
ENTERPRISEDATA.VALUE11 as VALUE11,
ENTERPRISEDATA.VALUE12 as VALUE12,
ENTERPRISEDATA.VALUE13 as VALUE13,
ENTERPRISEDATA.VALUE14 as VALUE14,
ENTERPRISEDATA.VALUE15 as VALUE15,
ENTERPRISEDATA.VALUE16 as VALUE16,
ENTERPRISEDATA.VALUE17 as VALUE17,
ENTERPRISEDATA.VALUE18 as VALUE18,
ENTERPRISEDATA.VALUE19 as VALUE19,
ENTERPRISEDATA.VALUE20 as VALUE20,
ENTERPRISEDATA.STRING1 as STRING1,
ENTERPRISEDATA.STRING2 as STRING2,
ENTERPRISEDATA.STRING3 as STRING3,
ENTERPRISEDATA.STRING4 as STRING4,
ENTERPRISEDATA.STRING5 as STRING5,
ENTERPRISEDATA.STRING6 as STRING6,
ENTERPRISEDATA.STRING7 as STRING7,
ENTERPRISEDATA.STRING8 as STRING8,
ENTERPRISEDATA.STRING9 as STRING9,
ENTERPRISEDATA.STRING10 as STRING10,
ENTERPRISEDATA.LONGSTRING1 as LONGSTRING1,
ENTERPRISEDATA.LONGSTRING2 as LONGSTRING2,
ENTERPRISEDATA.LONGSTRING3 as LONGSTRING3,
ENTERPRISEDATA.LONGSTRING4 as LONGSTRING4,
ENTERPRISEDATA.LONGSTRING5 as LONGSTRING5,
ENTERPRISEDATA.LONGSTRING6 as LONGSTRING6,
ENTERPRISEDATA.LONGSTRING7 as LONGSTRING7,
ENTERPRISEDATA.LONGSTRING8 as LONGSTRING8,
ENTERPRISEDATA.LONGSTRING9 as LONGSTRING9,
ENTERPRISEDATA.LONGSTRING10 as LONGSTRING10
from
ISSUES 
join ISSUESETTINGS on ISSUES.OBJECTID = ISSUESETTINGS.ISSUEID
left outer join ENTERPRISEDATA on ISSUES.OBJECTID = ENTERPRISEDATA.ISSUEID;
CREATE VIEW ITEMS as 
select 'FILES' as TABLENAME, CLASSID, SEQNO, LASTMODONNODEID, PREVMODONNODEID, ISSUEID, OBJECTID, REVISIONNUM, CONTAINERID, AUTHORID, CREATIONDATE, LASTMODIFIEDDATE, UPDATENUMBER, PREVREVISIONNUM, LASTCMD, LASTCMDACLVERSION, USERDEFINEDFIELD, LASTMODIFIEDBYID, PARENTENTITYID, BODY, BODYCONTENTTYPE, ISOBSOLETE, FILENAME, VISIBLENAME, VERSIONSTRING, DOCUMENTHASH, ISFINAL, DOCREFERENCEID, NULL as ACTIONTYPE, NULL as ASSOCIATEDOBJECTIDS, NULL as OLDENTITIES, NULL as NEWENTITIES, NULL as OTHERENTITIES, NULL as TQUNID, NULL as TABLEITEMID, NULL as TABLENODEID, NULL as TABLECMD, NULL as TABLECONTAINERID, NULL as TABLESEQNO, NULL as DIRTYCONTENT, NULL as STUBBED, NULL as ENTITYSTUBDATA, NULL as PARTICIPANTSTATE, NULL as PARTICIPANTROLE, NULL as PARTICIPANTTEAM, NULL as ISREQUIREDMEMBER, NULL as USERID, NULL as ISAGENT, NULL as NAME, NULL as EMAILADDRESS, NULL as ISEMAILONLY, NULL as INVITATION, NULL as ACCEPTRESENDCOUNT, NULL as ACCEPTRESENDTIMEOUT, NULL as ACCEPTLASTSENTTONODEID, NULL as TASKID, NULL as DISPOSITION, NULL as STATUSID, NULL as SHORTNAME, NULL as LONGNAME, NULL as DUETIME, NULL as ASSIGNEDTO, NULL as TARGETOBJECTIDS, NULL as RESPONSEID, NULL as TYPEID, NULL as LABEL, NULL as INSTRUCTIONS, NULL as ALLOWEDSTATUSES, NULL as ISSERIALREVIEW, NULL as DAYSTOREVIEW, NULL as REVIEWERIDS, NULL as REVIEWTYPE, NULL as REVIEWGROUP from FILES
union all
select 'LOGENTRIES' as TABLENAME, CLASSID, SEQNO, LASTMODONNODEID, PREVMODONNODEID, ISSUEID, OBJECTID, REVISIONNUM, CONTAINERID, AUTHORID, CREATIONDATE, LASTMODIFIEDDATE, UPDATENUMBER, PREVREVISIONNUM, LASTCMD, LASTCMDACLVERSION, USERDEFINEDFIELD, LASTMODIFIEDBYID, PARENTENTITYID, BODY, BODYCONTENTTYPE, ISOBSOLETE, NULL as FILENAME, NULL as VISIBLENAME, NULL as VERSIONSTRING, NULL as DOCUMENTHASH, NULL as ISFINAL, NULL as DOCREFERENCEID, ACTIONTYPE, ASSOCIATEDOBJECTIDS, OLDENTITIES, NEWENTITIES, OTHERENTITIES, NULL as TQUNID, NULL as TABLEITEMID, NULL as TABLENODEID, NULL as TABLECMD, NULL as TABLECONTAINERID, NULL as TABLESEQNO, NULL as DIRTYCONTENT, NULL as STUBBED, NULL as ENTITYSTUBDATA, NULL as PARTICIPANTSTATE, NULL as PARTICIPANTROLE, NULL as PARTICIPANTTEAM, NULL as ISREQUIREDMEMBER, NULL as USERID, NULL as ISAGENT, NULL as NAME, NULL as EMAILADDRESS, NULL as ISEMAILONLY, NULL as INVITATION, NULL as ACCEPTRESENDCOUNT, NULL as ACCEPTRESENDTIMEOUT, NULL as ACCEPTLASTSENTTONODEID, NULL as TASKID, NULL as DISPOSITION, NULL as STATUSID, NULL as SHORTNAME, NULL as LONGNAME, NULL as DUETIME, NULL as ASSIGNEDTO, NULL as TARGETOBJECTIDS, NULL as RESPONSEID, NULL as TYPEID, NULL as LABEL, NULL as INSTRUCTIONS, NULL as ALLOWEDSTATUSES, NULL as ISSERIALREVIEW, NULL as DAYSTOREVIEW, NULL as REVIEWERIDS, NULL as REVIEWTYPE, NULL as REVIEWGROUP from LOGENTRIES
union all
select 'LSBI' as TABLENAME, NULL as CLASSID, NULL as SEQNO, NULL as LASTMODONNODEID, NULL as PREVMODONNODEID, ISSUEID, NULL as OBJECTID, NULL as REVISIONNUM, NULL as CONTAINERID, NULL as AUTHORID, NULL as CREATIONDATE, NULL as LASTMODIFIEDDATE, UPDATENUMBER, NULL as PREVREVISIONNUM, NULL as LASTCMD, NULL as LASTCMDACLVERSION, NULL as USERDEFINEDFIELD, NULL as LASTMODIFIEDBYID, NULL as PARENTENTITYID, NULL as BODY, NULL as BODYCONTENTTYPE, NULL as ISOBSOLETE, NULL as FILENAME, NULL as VISIBLENAME, NULL as VERSIONSTRING, NULL as DOCUMENTHASH, NULL as ISFINAL, NULL as DOCREFERENCEID, NULL as ACTIONTYPE, NULL as ASSOCIATEDOBJECTIDS, NULL as OLDENTITIES, NULL as NEWENTITIES, NULL as OTHERENTITIES, TQUNID, TABLEITEMID, TABLENODEID, TABLECMD, TABLECONTAINERID, TABLESEQNO, DIRTYCONTENT, STUBBED, ENTITYSTUBDATA, NULL as PARTICIPANTSTATE, NULL as PARTICIPANTROLE, NULL as PARTICIPANTTEAM, NULL as ISREQUIREDMEMBER, NULL as USERID, NULL as ISAGENT, NULL as NAME, NULL as EMAILADDRESS, NULL as ISEMAILONLY, NULL as INVITATION, NULL as ACCEPTRESENDCOUNT, NULL as ACCEPTRESENDTIMEOUT, NULL as ACCEPTLASTSENTTONODEID, NULL as TASKID, NULL as DISPOSITION, NULL as STATUSID, NULL as SHORTNAME, NULL as LONGNAME, NULL as DUETIME, NULL as ASSIGNEDTO, NULL as TARGETOBJECTIDS, NULL as RESPONSEID, NULL as TYPEID, NULL as LABEL, NULL as INSTRUCTIONS, NULL as ALLOWEDSTATUSES, NULL as ISSERIALREVIEW, NULL as DAYSTOREVIEW, NULL as REVIEWERIDS, NULL as REVIEWTYPE, NULL as REVIEWGROUP from LSBI where TABLECMD=3
union all
select 'PARTICIPANTS' as TABLENAME, CLASSID, SEQNO, LASTMODONNODEID, PREVMODONNODEID, ISSUEID, OBJECTID, REVISIONNUM, CONTAINERID, AUTHORID, CREATIONDATE, LASTMODIFIEDDATE, UPDATENUMBER, PREVREVISIONNUM, LASTCMD, LASTCMDACLVERSION, USERDEFINEDFIELD, LASTMODIFIEDBYID, NULL as PARENTENTITYID, NULL as BODY, NULL as BODYCONTENTTYPE, NULL as ISOBSOLETE, NULL as FILENAME, NULL as VISIBLENAME, NULL as VERSIONSTRING, NULL as DOCUMENTHASH, NULL as ISFINAL, NULL as DOCREFERENCEID, NULL as ACTIONTYPE, NULL as ASSOCIATEDOBJECTIDS, NULL as OLDENTITIES, NULL as NEWENTITIES, NULL as OTHERENTITIES, NULL as TQUNID, NULL as TABLEITEMID, NULL as TABLENODEID, NULL as TABLECMD, NULL as TABLECONTAINERID, NULL as TABLESEQNO, NULL as DIRTYCONTENT, NULL as STUBBED, NULL as ENTITYSTUBDATA, PARTICIPANTSTATE, PARTICIPANTROLE, PARTICIPANTTEAM, ISREQUIREDMEMBER, USERID, ISAGENT, NAME, EMAILADDRESS, ISEMAILONLY, INVITATION, ACCEPTRESENDCOUNT, ACCEPTRESENDTIMEOUT, ACCEPTLASTSENTTONODEID, NULL as TASKID, NULL as DISPOSITION, NULL as STATUSID, NULL as SHORTNAME, NULL as LONGNAME, NULL as DUETIME, NULL as ASSIGNEDTO, NULL as TARGETOBJECTIDS, NULL as RESPONSEID, NULL as TYPEID, NULL as LABEL, NULL as INSTRUCTIONS, NULL as ALLOWEDSTATUSES, NULL as ISSERIALREVIEW, NULL as DAYSTOREVIEW, NULL as REVIEWERIDS, NULL as REVIEWTYPE, NULL as REVIEWGROUP from PARTICIPANTS
union all
select 'TASKCOMPLETIONS' as TABLENAME, CLASSID, SEQNO, LASTMODONNODEID, PREVMODONNODEID, ISSUEID, OBJECTID, REVISIONNUM, CONTAINERID, AUTHORID, CREATIONDATE, LASTMODIFIEDDATE, UPDATENUMBER, PREVREVISIONNUM, LASTCMD, LASTCMDACLVERSION, USERDEFINEDFIELD, LASTMODIFIEDBYID, PARENTENTITYID, BODY, BODYCONTENTTYPE, ISOBSOLETE, NULL as FILENAME, NULL as VISIBLENAME, NULL as VERSIONSTRING, NULL as DOCUMENTHASH, NULL as ISFINAL, NULL as DOCREFERENCEID, NULL as ACTIONTYPE, NULL as ASSOCIATEDOBJECTIDS, NULL as OLDENTITIES, NULL as NEWENTITIES, NULL as OTHERENTITIES, NULL as TQUNID, NULL as TABLEITEMID, NULL as TABLENODEID, NULL as TABLECMD, NULL as TABLECONTAINERID, NULL as TABLESEQNO, NULL as DIRTYCONTENT, NULL as STUBBED, NULL as ENTITYSTUBDATA, NULL as PARTICIPANTSTATE, NULL as PARTICIPANTROLE, NULL as PARTICIPANTTEAM, NULL as ISREQUIREDMEMBER, NULL as USERID, NULL as ISAGENT, NULL as NAME, NULL as EMAILADDRESS, NULL as ISEMAILONLY, NULL as INVITATION, NULL as ACCEPTRESENDCOUNT, NULL as ACCEPTRESENDTIMEOUT, NULL as ACCEPTLASTSENTTONODEID, TASKID, DISPOSITION, STATUSID, SHORTNAME, LONGNAME, NULL as DUETIME, NULL as ASSIGNEDTO, NULL as TARGETOBJECTIDS, NULL as RESPONSEID, NULL as TYPEID, NULL as LABEL, NULL as INSTRUCTIONS, NULL as ALLOWEDSTATUSES, NULL as ISSERIALREVIEW, NULL as DAYSTOREVIEW, NULL as REVIEWERIDS, NULL as REVIEWTYPE, NULL as REVIEWGROUP from TASKCOMPLETIONS
union all
select 'TASKS' as TABLENAME, CLASSID, SEQNO, LASTMODONNODEID, PREVMODONNODEID, ISSUEID, OBJECTID, REVISIONNUM, CONTAINERID, AUTHORID, CREATIONDATE, LASTMODIFIEDDATE, UPDATENUMBER, PREVREVISIONNUM, LASTCMD, LASTCMDACLVERSION, USERDEFINEDFIELD, LASTMODIFIEDBYID, PARENTENTITYID, BODY, BODYCONTENTTYPE, ISOBSOLETE, NULL as FILENAME, NULL as VISIBLENAME, NULL as VERSIONSTRING, NULL as DOCUMENTHASH, NULL as ISFINAL, NULL as DOCREFERENCEID, NULL as ACTIONTYPE, NULL as ASSOCIATEDOBJECTIDS, NULL as OLDENTITIES, NULL as NEWENTITIES, NULL as OTHERENTITIES, NULL as TQUNID, NULL as TABLEITEMID, NULL as TABLENODEID, NULL as TABLECMD, NULL as TABLECONTAINERID, NULL as TABLESEQNO, NULL as DIRTYCONTENT, NULL as STUBBED, NULL as ENTITYSTUBDATA, NULL as PARTICIPANTSTATE, NULL as PARTICIPANTROLE, NULL as PARTICIPANTTEAM, NULL as ISREQUIREDMEMBER, NULL as USERID, NULL as ISAGENT, NULL as NAME, NULL as EMAILADDRESS, NULL as ISEMAILONLY, NULL as INVITATION, NULL as ACCEPTRESENDCOUNT, NULL as ACCEPTRESENDTIMEOUT, NULL as ACCEPTLASTSENTTONODEID, NULL as TASKID, NULL as DISPOSITION, NULL as STATUSID, NULL as SHORTNAME, NULL as LONGNAME, DUETIME, ASSIGNEDTO, TARGETOBJECTIDS, RESPONSEID, TYPEID, LABEL, INSTRUCTIONS, ALLOWEDSTATUSES, ISSERIALREVIEW, DAYSTOREVIEW, REVIEWERIDS, REVIEWTYPE, REVIEWGROUP from TASKS;
CREATE VIEW TASKINFO as 
select
t.ISSUEID as ISSUEID,
t.OBJECTID as OBJECTID,
t.ASSIGNEDTO as ASSIGNEDTO,
t.TARGETOBJECTIDS as TARGETOBJECTIDS,
t.DUETIME as DUETIME,
t.ISOBSOLETE as ISOBSOLETE,
tc.DISPOSITION as DISPOSITION
from
TASKS t
join TASKCOMPLETIONS tc on tc.TASKID = t.OBJECTID;
CREATE INDEX DQ_ISSUEID_DEPENDSID on DQ (ISSUEID, DEPENDSID);
CREATE INDEX EMAILQ_TIMEQUEUED on EMAILQ (TIMEQUEUED);
CREATE INDEX FOLDERS_CONTAINERID_ISSUEID on FOLDERS (CONTAINERID, ISSUEID);
CREATE INDEX IMQ_DATETIMEQUEUED on IMQ (DATETIMEQUEUED);
CREATE INDEX INVITATIONS_RECIPIENTUSERID_INVITATIONID on INVITATIONS (RECIPIENTUSERID, INVITATIONID);
CREATE INDEX INVITATIONS_TQUNID on INVITATIONS (TQUNID);
CREATE INDEX ISSUESETTINGS_CONTAINERID on ISSUESETTINGS (CONTAINERID);
CREATE INDEX KMTPMSG_RECEIVEDDATE on KMTPMSG (RECEIVEDDATE desc);
CREATE INDEX KMTPNODEQ_MSGID on KMTPNODEQ (MSGID);
CREATE INDEX KMTPNODEQ_NODEID_MSGID on KMTPNODEQ (NODEID, MSGID);
CREATE INDEX KMTPNODEQ_RECEIVEDDATE on KMTPNODEQ (RECEIVEDDATE desc);
CREATE INDEX LSBI_ISSUEID_TABLEITEMID on LSBI (ISSUEID, TABLEITEMID);
CREATE INDEX LSBN_ISSUEID_NODEID on LSBN (ISSUEID, NODEID);
CREATE INDEX MMQ_ISSUEID_MMQENTRYINDEX on MMQ (ISSUEID, MMQENTRYINDEX);
CREATE INDEX NODEREG_NODEID_USERID on NODEREG (NODEID, USERID);
CREATE INDEX NODEREG_TQUNID on NODEREG (TQUNID);
CREATE INDEX NODEREG_USERID_NODEID on NODEREG (USERID, NODEID);
CREATE INDEX NODES_NODEID on NODES (NODEID);
CREATE INDEX NODES_TQUNID on NODES (TQUNID);
CREATE INDEX PARTICIPANTNODES_ISSUEID_OBJECTID_NODEID on PARTICIPANTNODES (ISSUEID, OBJECTID, NODEID);
CREATE INDEX PARTICIPANTNODES_TQUNID on PARTICIPANTNODES (TQUNID);
CREATE INDEX PARTICIPANTSETTINGS_PARTICIPANTID on PARTICIPANTSETTINGS (PARTICIPANTID);
CREATE INDEX PARTITIONS_LDAPDN on PARTITIONS (LDAPDN);
CREATE INDEX PARTITIONS_PARTITIONID_SERVERNODEID on PARTITIONS (PARTITIONID, SERVERNODEID);
CREATE INDEX PARTITIONS_SERVERNODEID_PARTITIONID on PARTITIONS (SERVERNODEID, PARTITIONID);
CREATE INDEX PARTITIONS_TQUNID on PARTITIONS (TQUNID);
CREATE INDEX TASKCOMPLETIONS_TASKID on TASKCOMPLETIONS (TASKID);
CREATE INDEX TASKS_ASSIGNEDTO on TASKS (ASSIGNEDTO);
CREATE INDEX USERS_PARTITIONID_USERID on USERS (PARTITIONID, USERID);
CREATE INDEX USERS_TQUNID on USERS (TQUNID);
CREATE INDEX USERS_USERID_PARTITIONID on USERS (USERID, PARTITIONID);
CREATE INDEX USERS_USERSID_USERID on USERS (USERSID, USERID);
COMMIT;

select NEWENTITIES from ITEMS where ((ISSUEID = 'x') and (OBJECTID = 'y'));

-- ===tkt1473.test===
CREATE TABLE t1(a,b);
INSERT INTO t1 VALUES(1,2);
INSERT INTO t1 VALUES(3,4);
SELECT * FROM t1;

SELECT (SELECT 1 FROM t1 WHERE a=1 UNION ALL SELECT 2 FROM t1 WHERE b=0);

SELECT (SELECT 1 FROM t1 WHERE a=1 UNION SELECT 2 FROM t1 WHERE b=0);

SELECT (SELECT 1 FROM t1 WHERE a=1 UNION ALL SELECT 2 FROM t1 WHERE b=4);

SELECT (SELECT 1 FROM t1 WHERE a=1 UNION SELECT 2 FROM t1 WHERE b=4);

SELECT (SELECT 1 FROM t1 WHERE a=0 UNION ALL SELECT 2 FROM t1 WHERE b=4);

SELECT (SELECT 1 FROM t1 WHERE a=0 UNION SELECT 2 FROM t1 WHERE b=4);

SELECT (SELECT 1 FROM t1 WHERE a=0 UNION ALL SELECT 2 FROM t1 WHERE b=0);

SELECT (SELECT 1 FROM t1 WHERE a=0 UNION SELECT 2 FROM t1 WHERE b=0);

SELECT EXISTS
(SELECT 1 FROM t1 WHERE a=1 UNION ALL SELECT 2 FROM t1 WHERE b=0);

SELECT EXISTS
(SELECT 1 FROM t1 WHERE a=1 UNION SELECT 2 FROM t1 WHERE b=0);

SELECT 1 FROM t1 WHERE a=1 UNION ALL SELECT 2 FROM t1 WHERE b=0;

SELECT EXISTS
(SELECT 1 FROM t1 WHERE a=1 UNION ALL SELECT 2 FROM t1 WHERE b=4);

SELECT EXISTS
(SELECT 1 FROM t1 WHERE a=1 UNION SELECT 2 FROM t1 WHERE b=4);

SELECT EXISTS
(SELECT 1 FROM t1 WHERE a=0 UNION ALL SELECT 2 FROM t1 WHERE b=4);

SELECT EXISTS
(SELECT 1 FROM t1 WHERE a=0 UNION SELECT 2 FROM t1 WHERE b=4);

SELECT EXISTS
(SELECT 1 FROM t1 WHERE a=0 UNION ALL SELECT 2 FROM t1 WHERE b=0);

SELECT EXISTS
(SELECT 1 FROM t1 WHERE a=0 UNION SELECT 2 FROM t1 WHERE b=0);

CREATE TABLE t2(x,y);
INSERT INTO t2 VALUES(1,2);
INSERT INTO t2 SELECT x+2, y+2 FROM t2;
INSERT INTO t2 SELECT x+4, y+4 FROM t2;
INSERT INTO t2 SELECT x+8, y+8 FROM t2;
INSERT INTO t2 SELECT x+16, y+16 FROM t2;
INSERT INTO t2 SELECT x+32, y+32 FROM t2;
INSERT INTO t2 SELECT x+64, y+64 FROM t2;
SELECT count(*), sum(x), sum(y) FROM t2;

SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=3
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=2
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=4;

SELECT (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=3
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=2
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=4
);

SELECT (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=-1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=3
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=2
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=4
);

SELECT 1 FROM t1 WHERE a=1 UNION SELECT 2 FROM t1 WHERE b=0;

SELECT (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=-1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=-1
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=2
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=-4
);

SELECT (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=-1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=-2
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=-3
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=4
);

SELECT (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=-1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=-2
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=-3
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=-4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=3
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=2
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=-1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=3
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=2
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=-1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=-1
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=2
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=-4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=-1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=-2
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=-3
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION ALL
SELECT 2 FROM t2 WHERE x=-1
UNION ALL
SELECT 3 FROM t2 WHERE x=2
UNION ALL
SELECT 4 FROM t2 WHERE x=-2
UNION ALL
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION ALL
SELECT 7 FROM t2 WHERE y=1
UNION ALL
SELECT 8 FROM t2 WHERE y=-3
UNION ALL
SELECT 9 FROM t2 WHERE y=3
UNION ALL
SELECT 10 FROM t2 WHERE y=-4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION
SELECT 2 FROM t2 WHERE x=1
UNION
SELECT 3 FROM t2 WHERE x=2
UNION
SELECT 4 FROM t2 WHERE x=3
UNION
SELECT 5 FROM t2 WHERE x=4
UNION
SELECT 6 FROM t2 WHERE y=0
UNION
SELECT 7 FROM t2 WHERE y=1
UNION
SELECT 8 FROM t2 WHERE y=2
UNION
SELECT 9 FROM t2 WHERE y=3
UNION
SELECT 10 FROM t2 WHERE y=4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION
SELECT 2 FROM t2 WHERE x=-1
UNION
SELECT 3 FROM t2 WHERE x=2
UNION
SELECT 4 FROM t2 WHERE x=3
UNION
SELECT 5 FROM t2 WHERE x=4
UNION
SELECT 6 FROM t2 WHERE y=0
UNION
SELECT 7 FROM t2 WHERE y=1
UNION
SELECT 8 FROM t2 WHERE y=2
UNION
SELECT 9 FROM t2 WHERE y=3
UNION
SELECT 10 FROM t2 WHERE y=4
);

SELECT 1 FROM t1 WHERE a=1 UNION ALL SELECT 2 FROM t1 WHERE b=4;

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION
SELECT 2 FROM t2 WHERE x=-1
UNION
SELECT 3 FROM t2 WHERE x=2
UNION
SELECT 4 FROM t2 WHERE x=-1
UNION
SELECT 5 FROM t2 WHERE x=4
UNION
SELECT 6 FROM t2 WHERE y=0
UNION
SELECT 7 FROM t2 WHERE y=1
UNION
SELECT 8 FROM t2 WHERE y=2
UNION
SELECT 9 FROM t2 WHERE y=3
UNION
SELECT 10 FROM t2 WHERE y=-4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION
SELECT 2 FROM t2 WHERE x=-1
UNION
SELECT 3 FROM t2 WHERE x=2
UNION
SELECT 4 FROM t2 WHERE x=-2
UNION
SELECT 5 FROM t2 WHERE x=4
UNION
SELECT 6 FROM t2 WHERE y=0
UNION
SELECT 7 FROM t2 WHERE y=1
UNION
SELECT 8 FROM t2 WHERE y=-3
UNION
SELECT 9 FROM t2 WHERE y=3
UNION
SELECT 10 FROM t2 WHERE y=4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION
SELECT 2 FROM t2 WHERE x=-1
UNION
SELECT 3 FROM t2 WHERE x=2
UNION
SELECT 4 FROM t2 WHERE x=-2
UNION
SELECT 5 FROM t2 WHERE x=4
UNION
SELECT 6 FROM t2 WHERE y=0
UNION
SELECT 7 FROM t2 WHERE y=1
UNION
SELECT 8 FROM t2 WHERE y=-3
UNION
SELECT 9 FROM t2 WHERE y=3
UNION
SELECT 10 FROM t2 WHERE y=-4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION
SELECT 2 FROM t2 WHERE x=-1
UNION
SELECT 3 FROM t2 WHERE x=2
UNION
SELECT 4 FROM t2 WHERE x=-2
UNION
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION
SELECT 7 FROM t2 WHERE y=1
UNION
SELECT 8 FROM t2 WHERE y=-3
UNION
SELECT 9 FROM t2 WHERE y=3
UNION
SELECT 10 FROM t2 WHERE y=4
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0
UNION
SELECT 2 FROM t2 WHERE x=-1
UNION
SELECT 3 FROM t2 WHERE x=2
UNION
SELECT 4 FROM t2 WHERE x=-2
UNION
SELECT 5 FROM t2 WHERE x=4
UNION ALL
SELECT 6 FROM t2 WHERE y=0
UNION
SELECT 7 FROM t2 WHERE y=1
UNION
SELECT 8 FROM t2 WHERE y=-3
UNION
SELECT 9 FROM t2 WHERE y=3
UNION
SELECT 10 FROM t2 WHERE y=-4
);

SELECT 1 FROM t2 WHERE x=1 EXCEPT SELECT 2 FROM t2 WHERE y=2;

SELECT (
SELECT 1 FROM t2 WHERE x=1 EXCEPT SELECT 2 FROM t2 WHERE y=2
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=1 EXCEPT SELECT 2 FROM t2 WHERE y=2
);

SELECT (
SELECT 1 FROM t2 WHERE x=0 EXCEPT SELECT 2 FROM t2 WHERE y=2
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=0 EXCEPT SELECT 2 FROM t2 WHERE y=2
);

SELECT 1 FROM t1 WHERE a=1 UNION SELECT 2 FROM t1 WHERE b=4;

SELECT 1 FROM t2 WHERE x=1 INTERSECT SELECT 2 FROM t2 WHERE y=2;

SELECT 1 FROM t2 WHERE x=1 INTERSECT SELECT 1 FROM t2 WHERE y=2;

SELECT (
SELECT 1 FROM t2 WHERE x=1 INTERSECT SELECT 2 FROM t2 WHERE y=2
);

SELECT (
SELECT 1 FROM t2 WHERE x=1 INTERSECT SELECT 1 FROM t2 WHERE y=2
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=1 INTERSECT SELECT 2 FROM t2 WHERE y=2
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=1 INTERSECT SELECT 1 FROM t2 WHERE y=2
);

SELECT (
SELECT 1 FROM t2 WHERE x=0 INTERSECT SELECT 1 FROM t2 WHERE y=2
);

SELECT EXISTS (
SELECT 1 FROM t2 WHERE x=1 INTERSECT SELECT 1 FROM t2 WHERE y=0
);

SELECT 1 FROM t1 WHERE a=0 UNION ALL SELECT 2 FROM t1 WHERE b=4;

SELECT 1 FROM t1 WHERE a=0 UNION SELECT 2 FROM t1 WHERE b=4;

SELECT 1 FROM t1 WHERE a=0 UNION ALL SELECT 2 FROM t1 WHERE b=0;

SELECT 1 FROM t1 WHERE a=0 UNION SELECT 2 FROM t1 WHERE b=0;

-- ===tkt1501.test===
CREATE TABLE t1(a,b);
INSERT INTO t1 VALUES(1,2);
SELECT a, b, 'abc' FROM t1
UNION
SELECT b, a, 'xyz' FROM t1
ORDER BY 2, 3;

-- ===tkt1512.test===
CREATE TABLE t1(a,b);
INSERT INTO t1 VALUES(1,2);
INSERT INTO t1 VALUES(3,4);
SELECT * FROM t1;

DROP TABLE t1;

VACUUM;

-- ===tkt1536.test===
CREATE TABLE t1(
a INTEGER PRIMARY KEY,
b TEXT
);
INSERT INTO t1 VALUES(1,'01');
SELECT typeof(a), typeof(b) FROM t1;

INSERT INTO t1(b) SELECT b FROM t1;
SELECT b FROM t1 WHERE rowid=2;

-- ===tkt1537.test===
CREATE TABLE t1(id, a1, a2);
INSERT INTO t1 VALUES(1, NULL, NULL);
INSERT INTO t1 VALUES(2, 1, 3);
CREATE TABLE t2(id, b);
INSERT INTO t2 VALUES(3, 1);
INSERT INTO t2 VALUES(4, NULL);
SELECT * FROM t1 LEFT JOIN t2 ON a1=b OR a2=+b;

DROP INDEX t1a1;
DROP INDEX t1a2;
DROP INDEX t2b;

SELECT * FROM t1 LEFT JOIN t2 ON b BETWEEN a1 AND a2;

CREATE INDEX t2b ON t2(b);
SELECT * FROM t1 LEFT JOIN t2 ON b BETWEEN a1 AND a2;

SELECT * FROM t2 LEFT JOIN t1 ON b BETWEEN a1 AND a2;

CREATE INDEX t1a1 ON t1(a1);
CREATE INDEX t1a2 ON t1(a2);
SELECT * FROM t2 LEFT JOIN t1 ON b BETWEEN a1 AND a2;

SELECT * FROM t1 LEFT JOIN t2 ON b GLOB 'abc*' WHERE t1.id=1;

SELECT * FROM t2 LEFT JOIN t1 ON a1 GLOB 'abc*' WHERE t2.id=3;

SELECT * FROM t1 LEFT JOIN t2 ON a1=b OR a2=b;

SELECT * FROM t2 LEFT JOIN t1 ON a1=b OR a2=b;

SELECT * FROM t1 LEFT JOIN t2 ON b IN (a1,a2);

SELECT * FROM t2 LEFT JOIN t1 ON b IN (a2,a1);

CREATE INDEX t1a1 ON t1(a1);
CREATE INDEX t1a2 ON t1(a2);
CREATE INDEX t2b ON t2(b);
SELECT * FROM t1 LEFT JOIN t2 ON a1=b OR a2=b;

SELECT * FROM t2 LEFT JOIN t1 ON a1=b OR a2=b;

SELECT * FROM t1 LEFT JOIN t2 ON b IN (a1,a2);

SELECT * FROM t2 LEFT JOIN t1 ON b IN (a2,a1);

-- ===tkt1567.test===
CREATE TABLE t1(a TEXT PRIMARY KEY);

BEGIN;
UPDATE t1 SET a = a||'x' WHERE rowid%2==0;

COMMIT;

-- ===tkt1644.test===
CREATE TABLE t1(a);
INSERT INTO t1 VALUES(1);
CREATE TABLE t2(b);
INSERT INTO t2 VALUES(99);
CREATE TEMP VIEW v1 AS SELECT * FROM t1;
SELECT * FROM v1;

CREATE TEMP VIEW temp_v1 AS SELECT * FROM real_t1 LIMIT 10 OFFSET 10;

DROP VIEW temp_v1;

DROP VIEW v1;
CREATE TEMP VIEW v1 AS SELECT * FROM t2;
SELECT * FROM v1;

SELECT * FROM t1;

CREATE TEMP TABLE t1(x);

SELECT * FROM t1;

CREATE TEMP TABLE temp_t1(a, b);

DROP TABLE temp_t1;

CREATE TABLE real_t1(a, b);
CREATE TEMP VIEW temp_v1 AS SELECT * FROM real_t1;

DROP VIEW temp_v1;

-- ===tkt1667.test===
PRAGMA auto_vacuum = 1;
BEGIN;
CREATE TABLE t1(a, b);

INSERT INTO t1 VALUES(i, randstr(1000, 2000));

COMMIT;

DELETE FROM t1 WHERE a = i;

BEGIN;

INSERT INTO t1 VALUES(i, randstr(1000, 2000));

COMMIT;

DELETE FROM t1;

-- ===tkt1873.test===
CREATE TABLE t1(x, y);
ATTACH 'test2.db' AS aux;
CREATE TABLE aux.t2(x, y);
INSERT INTO t1 VALUES(1, 2);
INSERT INTO t1 VALUES(3, 4);
INSERT INTO t2 VALUES(5, 6);
INSERT INTO t2 VALUES(7, 8);

SELECT * FROM t2 LIMIT 1;

DETACH aux;

SELECT * FROM t1 LIMIT 1;

DETACH aux;

-- ===tkt2141.test===
CREATE TABLE tab1 (t1_id integer PRIMARY KEY, t1_desc);
INSERT INTO tab1 VALUES(1,'rec 1 tab 1');
CREATE TABLE tab2 (t2_id integer PRIMARY KEY, t2_id_t1, t2_desc);
INSERT INTO tab2 VALUES(1,1,'rec 1 tab 2');
CREATE TABLE tab3 (t3_id integer PRIMARY KEY, t3_id_t2, t3_desc);
INSERT INTO tab3 VALUES(1,1,'aa');
SELECT *
FROM tab1 t1 LEFT JOIN tab2 t2 ON t1.t1_id = t2.t2_id_t1
WHERE t2.t2_id IN
(SELECT t2_id FROM tab2, tab3 ON t2_id = t3_id_t2
WHERE t3_id IN (1,2) GROUP BY t2_id);

SELECT *
FROM tab1 t1 LEFT JOIN tab2 t2 ON t1.t1_id = t2.t2_id_t1
WHERE t2.t2_id IN
(SELECT t2_id FROM tab2, tab3 ON t2_id = t3_id_t2
WHERE t3_id IN (1,2));

SELECT *
FROM tab1 t1 LEFT JOIN tab2 t2
WHERE t2.t2_id IN
(SELECT t2_id FROM tab2, tab3 ON t2_id = t3_id_t2
WHERE t3_id IN (1,2));

-- ===tkt2192.test===
create table records (
date          real,
type          text,
description   text,
value         integer,
acc_name      text,
acc_no        text
);
create view direct_debits as
select * from records where type = 'D/D';
create view monthly_direct_debits as
select strftime('%Y-%m', date) as date, (-1 * sum(value)) as value
from direct_debits
group by strftime('%Y-%m', date);
create view energy as
select strftime('%Y-%m', date) as date, (-1 * sum(value)) as value
from direct_debits
where description like '%NPOWER%'
group by strftime('%Y-%m', date);
create view phone_internet as
select strftime('%Y-%m', date) as date, (-1 * sum(value)) as value
from direct_debits
where description like '%BT DIRECT%'
or description like '%SUPANET%'
or description like '%ORANGE%'
group by strftime('%Y-%m', date);
create view credit_cards as
select strftime('%Y-%m', date) as date, (-1 * sum(value)) as value
from direct_debits where description like '%VISA%'
group by strftime('%Y-%m', date);
create view expense_overview as
select 'Energy' as expense, date, value from energy
union
select 'Phone/Internet' as expense, date, value from phone_internet
union
select 'Credit Card' as expense, date, value from credit_cards;
create view jan as
select 'jan', expense, value from expense_overview
where date like '%-01';
create view nov as
select 'nov', expense, value from expense_overview
where date like '%-11';
create view summary as
select * from jan join nov on (jan.expense = nov.expense);

select * from summary;

CREATE TABLE t1(a,b);
CREATE VIEW v1 AS
SELECT * FROM t1 WHERE b%7=0 UNION SELECT * FROM t1 WHERE b%5=0;
INSERT INTO t1 VALUES(1,7);
INSERT INTO t1 VALUES(2,10);
INSERT INTO t1 VALUES(3,14);
INSERT INTO t1 VALUES(4,15);
INSERT INTO t1 VALUES(1,16);
INSERT INTO t1 VALUES(2,17);
INSERT INTO t1 VALUES(3,20);
INSERT INTO t1 VALUES(4,21);
INSERT INTO t1 VALUES(1,22);
INSERT INTO t1 VALUES(2,24);
INSERT INTO t1 VALUES(3,25);
INSERT INTO t1 VALUES(4,26);
INSERT INTO t1 VALUES(1,27);
SELECT b FROM v1 ORDER BY b;

SELECT * FROM v1 ORDER BY a, b;

SELECT x.a || '/' || x.b || '/' || y.b
FROM v1 AS x JOIN v1 AS y ON x.a=y.a AND x.b<y.b
ORDER BY x.a, x.b, y.b;

CREATE VIEW v2 AS
SELECT x.a || '/' || x.b || '/' || y.b AS z
FROM v1 AS x JOIN v1 AS y ON x.a=y.a AND x.b<y.b
ORDER BY x.a, x.b, y.b;
SELECT * FROM v2;

-- ===tkt2251.test===
CREATE TABLE t1(a INTEGER);
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES(2);
INSERT INTO t1 VALUES(9);
INSERT INTO t1 VALUES(9);
INSERT INTO t1 VALUES(9);
INSERT INTO t1 VALUES(3);
INSERT INTO t1 VALUES(2);
ALTER TABLE t1 ADD COLUMN b REAL DEFAULT 4.0;
SELECT avg(b), typeof(avg(b)) FROM t1;

SELECT sum(b), typeof(sum(b)) FROM t1;

SELECT a, sum(b), typeof(sum(b)) FROM t1 GROUP BY a ORDER BY a;

SELECT b, typeof(b) FROM t1 WHERE a=3;

CREATE INDEX t1i1 ON t1(a,b);
SELECT b, typeof(b) FROM t1 WHERE a=3;

REINDEX;
SELECT b, typeof(b) FROM t1 WHERE a=3;

CREATE TABLE t2(x,y);
INSERT INTO t2 SELECT * FROM t1;
SELECT y, typeof(y) FROM t2 WHERE x=3;

CREATE TABLE t3 AS SELECT * FROM t1;
SELECT b, typeof(b) FROM t3 WHERE a=3;

-- ===tkt2285.test===
PRAGMA locking_mode = EXCLUSIVE;

BEGIN;
CREATE TABLE abc(a, b, c);
ROLLBACK;

SELECT * FROM sqlite_master;

BEGIN;
CREATE TEMP TABLE abc(a, b, c);
ROLLBACK;

SELECT * FROM sqlite_temp_master;

-- ===tkt2332.test===
CREATE TABLE blobs (k INTEGER PRIMARY KEY, v BLOB);
PRAGMA cache_size = 100;

INSERT INTO blobs VALUES(iKey, zeroblob(Len));

SELECT length(v) FROM blobs WHERE k = iKey;

SELECT length(v) FROM blobs WHERE k = [mu];

SELECT v FROM blobs WHERE k = iKey;

-- ===tkt2339.test===
create table t1(num int);
insert into t1 values (1);
insert into t1 values (2);
insert into t1 values (3);
insert into t1 values (4);
create table t2(num int);
insert into t2 values (11);
insert into t2 values (12);
insert into t2 values (13);
insert into t2 values (14);
SELECT * FROM (SELECT * FROM t1 ORDER BY num DESC LIMIT 2)
UNION
SELECT * FROM (SELECT * FROM t2 ORDER BY num DESC LIMIT 2);

SELECT * FROM (SELECT * FROM t1 ORDER BY num DESC LIMIT 2)
UNION ALL
SELECT * FROM (SELECT * FROM t2 ORDER BY num DESC LIMIT 2);

SELECT * FROM (SELECT * FROM t1 ORDER BY num DESC)
UNION ALL
SELECT * FROM (SELECT * FROM t2 ORDER BY num DESC LIMIT 2);

SELECT * FROM (SELECT * FROM t1 ORDER BY num DESC LIMIT 2)
UNION ALL
SELECT * FROM (SELECT * FROM t2 ORDER BY num DESC);

SELECT * FROM (SELECT * FROM t1 ORDER BY num DESC LIMIT 2)
UNION
SELECT * FROM (SELECT * FROM t2 ORDER BY num DESC);

SELECT * FROM (SELECT * FROM t1 ORDER BY num DESC LIMIT 2)
EXCEPT
SELECT * FROM (SELECT * FROM t2 ORDER BY num DESC);

SELECT * FROM (SELECT * FROM t1 LIMIT 2)
UNION
SELECT * FROM (SELECT * FROM t2 ORDER BY num DESC LIMIT 2);

SELECT * FROM (SELECT * FROM t1 LIMIT 2)
UNION
SELECT * FROM (SELECT * FROM t2 LIMIT 2);

SELECT * FROM (SELECT * FROM t1 ORDER BY num DESC LIMIT 2)
UNION
SELECT * FROM (SELECT * FROM t2 LIMIT 2);

-- ===tkt2391.test===
CREATE TABLE folders(folderid, parentid, foldername COLLATE binary);
INSERT INTO folders VALUES(1, 3, 'FolderA');
INSERT INTO folders VALUES(1, 3, 'folderB');
INSERT INTO folders VALUES(4, 0, 'FolderC');

SELECT count(*) FROM folders WHERE foldername < 'FolderC';

SELECT count(*) FROM folders WHERE foldername < 'FolderC' COLLATE nocase;

CREATE INDEX f_i ON folders(foldername);
SELECT count(*) FROM folders WHERE foldername < 'FolderC' COLLATE nocase;

-- ===tkt2409.test===
PRAGMA cache_size=10;
CREATE TABLE t1(x TEXT UNIQUE NOT NULL, y BLOB);

BEGIN;
INSERT INTO t1 VALUES(zShort, zLong);

PRAGMA cache_size=10;
DELETE FROM t1;

PRAGMA cache_size=20;
DROP TABLE t1;
CREATE TABLE t1 (x TEXT UNIQUE NOT NULL);

-- ===tkt2450.test===
CREATE TABLE "t a" ("""cb""");
INSERT INTO "t a" ("""cb""") VALUES (1);
SELECT """cb""" FROM "t a";

SELECT * FROM "t a";

SELECT "t a".* FROM "t a";

CREATE TABLE t1(a);
INSERT INTO t1 VALUES(2);
SELECT * FROM "t a", t1;

-- ===tkt2565.test===
pragma page_size=512;
pragma auto_vacuum=2;
pragma cache_size=16;

CREATE TABLE A(Id INTEGER, Name TEXT);

pragma locking_mode=exclusive;

BEGIN EXCLUSIVE;
INSERT INTO a VALUES(1, 'ABCDEFGHIJKLMNOP');

-- ===tkt2640.test===
CREATE TABLE persons(person_id, name);
INSERT INTO persons VALUES(1,'fred');
INSERT INTO persons VALUES(2,'barney');
INSERT INTO persons VALUES(3,'wilma');
INSERT INTO persons VALUES(4,'pebbles');
INSERT INTO persons VALUES(5,'bambam');
CREATE TABLE directors(person_id);
INSERT INTO directors VALUES(5);
INSERT INTO directors VALUES(3);
CREATE TABLE writers(person_id);
INSERT INTO writers VALUES(2);
INSERT INTO writers VALUES(3);
INSERT INTO writers VALUES(4);
SELECT DISTINCT p.name
FROM persons p, directors d
WHERE d.person_id=p.person_id
AND NOT EXISTS (
SELECT person_id FROM directors d1 WHERE d1.person_id=p.person_id
EXCEPT
SELECT person_id FROM writers w
);

SELECT DISTINCT p.name
FROM persons p CROSS JOIN directors d
WHERE d.person_id=p.person_id
AND NOT EXISTS (
SELECT person_id FROM directors d1 WHERE d1.person_id=p.person_id
EXCEPT
SELECT person_id FROM writers w
);

SELECT DISTINCT p.name
FROM directors d CROSS JOIN persons p
WHERE d.person_id=p.person_id
AND NOT EXISTS (
SELECT person_id FROM directors d1 WHERE d1.person_id=p.person_id
EXCEPT
SELECT person_id FROM writers w
);

SELECT DISTINCT p.name
FROM persons p, directors d
WHERE d.person_id=p.person_id
AND NOT EXISTS (
SELECT person_id FROM directors d1 WHERE d1.person_id=d.person_id
EXCEPT
SELECT person_id FROM writers w
);

SELECT DISTINCT p.name
FROM persons p CROSS JOIN directors d
WHERE d.person_id=p.person_id
AND NOT EXISTS (
SELECT person_id FROM directors d1 WHERE d1.person_id=d.person_id
EXCEPT
SELECT person_id FROM writers w
);

SELECT DISTINCT p.name
FROM directors d CROSS JOIN persons p
WHERE d.person_id=p.person_id
AND NOT EXISTS (
SELECT person_id FROM directors d1 WHERE d1.person_id=d.person_id
EXCEPT
SELECT person_id FROM writers w
);

-- ===tkt2643.test===
CREATE TABLE t1(a INTEGER PRIMARY KEY, b UNIQUE, c);
INSERT INTO t1 VALUES(1,2,3);
INSERT INTO t1 VALUES(2,3,4);
ANALYZE;

CREATE INDEX i1 ON t1(c);
SELECT count(*) FROM t1 WHERE c IS NOT NULL;

-- ===tkt2686.test===
PRAGMA page_size=1024;
PRAGMA max_page_count=50;
PRAGMA auto_vacuum=0;
CREATE TABLE filler (fill);

INSERT INTO filler (fill) VALUES (randstr(1000, 10000));

DELETE FROM filler 
WHERE rowid <= (SELECT MAX(rowid) FROM filler LIMIT 20);

PRAGMA page_size=1024;
PRAGMA max_page_count=50;
PRAGMA auto_vacuum=1;
CREATE TABLE filler (fill);

INSERT INTO filler (fill) VALUES (randstr(1000, 10000));

DELETE FROM filler 
WHERE rowid <= (SELECT MAX(rowid) FROM filler LIMIT 20);

-- ===tkt2767.test===
CREATE TABLE t1(x);
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES(2);
INSERT INTO t1 SELECT x+2 FROM t1;
INSERT INTO t1 SELECT x+4 FROM t1;
INSERT INTO t1 SELECT x+8 FROM t1;
INSERT INTO t1 SELECT x+16 FROM t1;
CREATE TRIGGER r1 BEFORE UPDATE ON t1 BEGIN
SELECT raise(ignore);
END;
CREATE TRIGGER r2 BEFORE DELETE ON t1 BEGIN
SELECT raise(ignore);
END;
CREATE TRIGGER r3 BEFORE INSERT ON t1 BEGIN
SELECT raise(ignore);
END;
SELECT count(*), sum(x) FROM t1;

DELETE FROM t1 WHERE x>0;
SELECT count(*), sum(x) FROM t1;

UPDATE t1 SET x=x+1;
SELECT count(*), sum(x) FROM t1;

INSERT INTO t1 SELECT x+32 FROM t1;
SELECT count(*), sum(x) FROM t1;

-- ===tkt2817.test===
CREATE TEMP TABLE tbl(a, b, c);
-- INSERT INTO tbl VALUES(2, 'ghi', 'jkl');

CREATE TABLE main.tbl(a, b, c); 
CREATE INDEX main.tbli ON tbl(a, b, c);
INSERT INTO main.tbl SELECT a, b, c FROM temp.tbl;

CREATE TEMP TABLE tmp(a, b, c);
INSERT INTO tmp VALUES(1, 'abc', 'def');
INSERT INTO tmp VALUES(2, 'ghi', 'jkl');

CREATE TABLE main.tbl(a, b, c); 
CREATE INDEX main.tbli ON tbl(a, b, c);
INSERT INTO main.tbl SELECT a, b, c FROM temp.tmp;

-- ===tkt2820.test===
PRAGMA vdbe_trace=ON;

SELECT name FROM sqlite_master ORDER BY 1;

CREATE TABLE t1(a INTEGER PRIMARY KEY);
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES(2);

SELECT name FROM sqlite_master;

INSERT INTO t1 SELECT a+1 FROM t1 ORDER BY a DESC;

SELECT a FROM t1 ORDER BY a;

-- ===tkt2822.test===
CREATE TABLE t1(a, b, c);
CREATE TABLE t2(a, b, c);
INSERT INTO t1 VALUES(1, 3, 9);
INSERT INTO t1 VALUES(3, 9, 27);
INSERT INTO t1 VALUES(5, 15, 45);
INSERT INTO t2 VALUES(2, 6, 18);
INSERT INTO t2 VALUES(4, 12, 36);
INSERT INTO t2 VALUES(6, 18, 54);

SELECT a AS b, CAST (b AS TEXT) AS a, c FROM t1 
UNION ALL 
SELECT a, b, c FROM t2 
ORDER BY a;

SELECT a, b, c FROM t2 
UNION ALL 
SELECT a AS b, CAST (b AS TEXT) AS a, c FROM t1 
ORDER BY a;

CREATE TABLE t3(a,b);
INSERT INTO t3 VALUES(1,8);
INSERT INTO t3 VALUES(9,2);
SELECT a AS b FROM t3 ORDER BY b;

SELECT a AS b FROM t3 ORDER BY B;

SELECT a AS 'b' FROM t3 ORDER BY "B";

SELECT a AS "b" FROM t3 ORDER BY [B];

SELECT a AS b FROM t3 ORDER BY +b;

CREATE TABLE t6a(p,q);
INSERT INTO t6a VALUES(1,8);
INSERT INTO t6a VALUES(9,2);
CREATE TABLE t6b(x,y);
INSERT INTO t6b VALUES(1,7);
INSERT INTO t6b VALUES(7,2);
SELECT p, q FROM t6a UNION ALL SELECT x, y FROM t6b ORDER BY 1, 2;

SELECT p PX, q QX FROM t6a UNION ALL SELECT x XX, y YX FROM t6b
ORDER BY PX, YX;

SELECT p PX, q QX FROM t6a UNION ALL SELECT x XX, y YX FROM t6b
ORDER BY XX, QX;

SELECT a, b, c FROM t1 UNION ALL SELECT a, b, c FROM t2 ORDER BY 1;

SELECT p PX, q QX FROM t6a UNION ALL SELECT x XX, y YX FROM t6b
ORDER BY QX, XX;

SELECT p PX, q QX FROM t6a UNION ALL SELECT x XX, y YX FROM t6b
ORDER BY t6b.x, QX;

SELECT p PX, q QX FROM t6a UNION ALL SELECT x XX, y YX FROM t6b
ORDER BY t6a.q, XX;

CREATE TABLE t7(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,
a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25);

SELECT a, CAST (b AS TEXT), c FROM t1 
UNION ALL 
SELECT a, b, c FROM t2 
ORDER BY 2;

SELECT a, b, c FROM t1 UNION ALL SELECT a, b, c FROM t2 ORDER BY a;

SELECT a, CAST (b AS TEXT) AS x, c FROM t1 
UNION ALL 
SELECT a, b, c FROM t2 
ORDER BY x;

SELECT t1.a, b, c FROM t1 UNION ALL SELECT t2.a, b, c FROM t2 ORDER BY a;

SELECT a, CAST (b AS TEXT) AS x, c FROM t1 
UNION ALL 
SELECT a, b, c FROM t2 
ORDER BY CAST (b AS TEXT);

SELECT t1.a, b, c FROM t1 UNION ALL SELECT t2.a, b, c FROM t2 ORDER BY t1.a;

SELECT a, b, c FROM t1 UNION ALL SELECT a AS x, b, c FROM t2 ORDER BY x;

-- ===tkt2832.test===
CREATE TABLE t1(a PRIMARY KEY);
INSERT INTO t1 VALUES(2);
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES(3);

UPDATE OR REPLACE t1 SET a = 1;
SELECT * FROM t1;

CREATE TABLE t2(a, b);
CREATE TRIGGER t2_t AFTER UPDATE ON t2 BEGIN
DELETE FROM t2 WHERE a = new.a + 1;
END;
INSERT INTO t2 VALUES(1, 2);
INSERT INTO t2 VALUES(2, 3);

UPDATE t2 SET b = 5;

CREATE TABLE t3(a, b);
CREATE TRIGGER t3_t AFTER DELETE ON t3 BEGIN
DELETE FROM t3 WHERE a = old.a + 1;
END;
INSERT INTO t3 VALUES(1, 2);
INSERT INTO t3 VALUES(2, 3);

DELETE FROM t3 WHERE 1;

-- ===tkt2854.test===
CREATE TABLE abc(a, b, c);

BEGIN IMMEDIATE;

SELECT * FROM abc;

BEGIN;
SELECT * FROM abc;

SELECT * FROM abc;

COMMIT;

BEGIN EXCLUSIVE;

COMMIT;

SELECT * FROM abc;

CREATE TABLE def(d, e, f);

ATTACH 'test2.db' AS aux;

-- ===tkt2920.test===
PRAGMA page_size=1024;
PRAGMA max_page_count=40;
PRAGMA auto_vacuum=0;
CREATE TABLE filler (fill);

INSERT INTO filler VALUES(randomblob(1024));

PRAGMA max_page_count=41;

PRAGMA max_page_count=42;

-- ===tkt2927.test===
CREATE TABLE t1(a, b);
INSERT INTO t1 VALUES(1,11);
INSERT INTO t1 VALUES(2,22);
INSERT INTO t1 VALUES(3,33);
INSERT INTO t1 VALUES(4,44);
INSERT INTO t1 VALUES(5,55);
SELECT * FROM t1;

SELECT abs(a), b FROM t1
UNION ALL
SELECT a, b FROM t1;

SELECT abs(a), b FROM t1
UNION ALL
SELECT a, abs(b) FROM t1;

SELECT abs(a), b FROM t1
UNION ALL
SELECT abs(a), b FROM t1;

SELECT abs(a), b FROM t1
UNION ALL
SELECT abs(a), abs(b) FROM t1;

SELECT abs(a), abs(b) FROM t1
UNION ALL
SELECT a, b FROM t1;

SELECT abs(a), abs(b) FROM t1
UNION ALL
SELECT a, abs(b) FROM t1;

SELECT abs(a), abs(b) FROM t1
UNION ALL
SELECT abs(a), b FROM t1;

SELECT abs(a), abs(b) FROM t1
UNION ALL
SELECT abs(a), abs(b) FROM t1;

SELECT a, b FROM t1
UNION 
SELECT a, b FROM t1
ORDER BY 1;

SELECT a, b FROM t1
UNION 
SELECT a, abs(b) FROM t1
ORDER BY 1;

SELECT a, b FROM t1
UNION ALL
SELECT a, b FROM t1;

SELECT a, b FROM t1
UNION 
SELECT abs(a), b FROM t1
ORDER BY 1;

SELECT a, b FROM t1
UNION 
SELECT abs(a), abs(b) FROM t1
ORDER BY 1;

SELECT a, abs(b) FROM t1
UNION 
SELECT a, b FROM t1
ORDER BY 1;

SELECT a, abs(b) FROM t1
UNION 
SELECT a, abs(b) FROM t1
ORDER BY 1;

SELECT a, abs(b) FROM t1
UNION 
SELECT abs(a), b FROM t1
ORDER BY 1;

SELECT a, abs(b) FROM t1
UNION 
SELECT abs(a), abs(b) FROM t1
ORDER BY 1;

SELECT abs(a), b FROM t1
UNION 
SELECT a, b FROM t1
ORDER BY 1;

SELECT abs(a), b FROM t1
UNION 
SELECT a, abs(b) FROM t1
ORDER BY 1;

SELECT abs(a), b FROM t1
UNION 
SELECT abs(a), b FROM t1
ORDER BY 1;

SELECT abs(a), b FROM t1
UNION 
SELECT abs(a), abs(b) FROM t1
ORDER BY 1;

SELECT a, b FROM t1
UNION ALL
SELECT a, abs(b) FROM t1;

SELECT abs(a), abs(b) FROM t1
UNION 
SELECT a, b FROM t1
ORDER BY 1;

SELECT abs(a), abs(b) FROM t1
UNION 
SELECT a, abs(b) FROM t1
ORDER BY 1;

SELECT abs(a), abs(b) FROM t1
UNION 
SELECT abs(a), b FROM t1
ORDER BY 1;

SELECT abs(a), abs(b) FROM t1
UNION 
SELECT abs(a), abs(b) FROM t1
ORDER BY 1;

SELECT a+b, a-b, a, b FROM t1
UNION ALL
SELECT a+b, a-b, a, b FROM t1;

SELECT a+b, a-b, a, b FROM t1
UNION ALL
SELECT a+b, a-b, a, abs(b) FROM t1;

SELECT a+b, a-b, a, b FROM t1
UNION ALL
SELECT a+b, a-b, abs(a), b FROM t1;

SELECT a+b, a-b, a, b FROM t1
UNION ALL
SELECT a+b, a-b, abs(a), abs(b) FROM t1;

SELECT a+b, a-b, a, abs(b) FROM t1
UNION ALL
SELECT a+b, a-b, a, b FROM t1;

SELECT a+b, a-b, a, abs(b) FROM t1
UNION ALL
SELECT a+b, a-b, a, abs(b) FROM t1;

SELECT a, b FROM t1
UNION ALL
SELECT abs(a), b FROM t1;

SELECT a+b, a-b, a, abs(b) FROM t1
UNION ALL
SELECT a+b, a-b, abs(a), b FROM t1;

SELECT a+b, a-b, a, abs(b) FROM t1
UNION ALL
SELECT a+b, a-b, abs(a), abs(b) FROM t1;

SELECT a+b, a-b, abs(a), b FROM t1
UNION ALL
SELECT a+b, a-b, a, b FROM t1;

SELECT a+b, a-b, abs(a), b FROM t1
UNION ALL
SELECT a+b, a-b, a, abs(b) FROM t1;

SELECT a+b, a-b, abs(a), b FROM t1
UNION ALL
SELECT a+b, a-b, abs(a), b FROM t1;

SELECT a+b, a-b, abs(a), b FROM t1
UNION ALL
SELECT a+b, a-b, abs(a), abs(b) FROM t1;

SELECT a+b, a-b, abs(a), abs(b) FROM t1
UNION ALL
SELECT a+b, a-b, a, b FROM t1;

SELECT a+b, a-b, abs(a), abs(b) FROM t1
UNION ALL
SELECT a+b, a-b, a, abs(b) FROM t1;

SELECT a+b, a-b, abs(a), abs(b) FROM t1
UNION ALL
SELECT a+b, a-b, abs(a), b FROM t1;

SELECT a+b, a-b, abs(a), abs(b) FROM t1
UNION ALL
SELECT a+b, a-b, abs(a), abs(b) FROM t1;

SELECT a, b FROM t1
UNION ALL
SELECT abs(a), abs(b) FROM t1;

SELECT a, b FROM t1
EXCEPT
SELECT a, b FROM t1;

SELECT a, b FROM t1
EXCEPT
SELECT a, abs(b) FROM t1;

SELECT a, b FROM t1
EXCEPT
SELECT abs(a), b FROM t1;

SELECT a, b FROM t1
EXCEPT
SELECT abs(a), abs(b) FROM t1;

SELECT a, abs(b) FROM t1
EXCEPT
SELECT a, b FROM t1;

SELECT a, abs(b) FROM t1
EXCEPT
SELECT a, abs(b) FROM t1;

SELECT a, abs(b) FROM t1
EXCEPT
SELECT abs(a), b FROM t1;

SELECT a, abs(b) FROM t1
EXCEPT
SELECT abs(a), abs(b) FROM t1;

SELECT abs(a), b FROM t1
EXCEPT
SELECT a, b FROM t1;

SELECT abs(a), b FROM t1
EXCEPT
SELECT a, abs(b) FROM t1;

SELECT a, abs(b) FROM t1
UNION ALL
SELECT a, b FROM t1;

SELECT abs(a), b FROM t1
EXCEPT
SELECT abs(a), b FROM t1;

SELECT abs(a), b FROM t1
EXCEPT
SELECT abs(a), abs(b) FROM t1;

SELECT abs(a), abs(b) FROM t1
EXCEPT
SELECT a, b FROM t1;

SELECT abs(a), abs(b) FROM t1
EXCEPT
SELECT a, abs(b) FROM t1;

SELECT abs(a), abs(b) FROM t1
EXCEPT
SELECT abs(a), b FROM t1;

SELECT abs(a), abs(b) FROM t1
EXCEPT
SELECT abs(a), abs(b) FROM t1;

SELECT a, b FROM t1
INTERSECT
SELECT a, b FROM t1
ORDER BY 1;

SELECT a, b FROM t1
INTERSECT
SELECT a, abs(b) FROM t1
ORDER BY 1;

SELECT a, b FROM t1
INTERSECT
SELECT abs(a), b FROM t1
ORDER BY 1;

SELECT a, b FROM t1
INTERSECT
SELECT abs(a), abs(b) FROM t1
ORDER BY 1;

SELECT a, abs(b) FROM t1
UNION ALL
SELECT a, abs(b) FROM t1;

SELECT a, abs(b) FROM t1
INTERSECT
SELECT a, b FROM t1
ORDER BY 1;

SELECT a, abs(b) FROM t1
INTERSECT
SELECT a, abs(b) FROM t1
ORDER BY 1;

SELECT a, abs(b) FROM t1
INTERSECT
SELECT abs(a), b FROM t1
ORDER BY 1;

SELECT a, abs(b) FROM t1
INTERSECT
SELECT abs(a), abs(b) FROM t1
ORDER BY 1;

SELECT abs(a), b FROM t1
INTERSECT
SELECT a, b FROM t1
ORDER BY 1;

SELECT abs(a), b FROM t1
INTERSECT
SELECT a, abs(b) FROM t1
ORDER BY 1;

SELECT abs(a), b FROM t1
INTERSECT
SELECT abs(a), b FROM t1
ORDER BY 1;

SELECT abs(a), b FROM t1
INTERSECT
SELECT abs(a), abs(b) FROM t1
ORDER BY 1;

SELECT abs(a), abs(b) FROM t1
INTERSECT
SELECT a, b FROM t1
ORDER BY 1;

SELECT abs(a), abs(b) FROM t1
INTERSECT
SELECT a, abs(b) FROM t1
ORDER BY 1;

SELECT a, abs(b) FROM t1
UNION ALL
SELECT abs(a), b FROM t1;

SELECT abs(a), abs(b) FROM t1
INTERSECT
SELECT abs(a), b FROM t1
ORDER BY 1;

SELECT abs(a), abs(b) FROM t1
INTERSECT
SELECT abs(a), abs(b) FROM t1
ORDER BY 1;

CREATE TABLE host (
hostname text not null primary key,
consoleHost text,
consolePort text
);
INSERT INTO "host" VALUES('aald04','aalp03','4');
INSERT INTO "host" VALUES('aald17','aalp01','1');
CREATE VIEW consolemap1a as
select hostname, consolehost, '/dev/cuaD0.' || (consoleport-1) consoleport
from host where consolehost='aalp01';
CREATE VIEW consolemap1b as
select hostname hostname, consolehost consolehost, '/dev/cuaD' ||
substr('01',1+((consoleport-1)/16),1) ||
substr('0123456789abcdef',1+((consoleport-1)%16),1) consoleport
from host where consolehost='aalp03';
CREATE VIEW consolemap1 as
select * from consolemap1a
union
select * from consolemap1b;
SELECT * from consolemap1b;

SELECT * FROM consolemap1;

SELECT a, abs(b) FROM t1
UNION ALL
SELECT abs(a), abs(b) FROM t1;

-- ===tkt2942.test===
create table t1(num int);
insert into t1 values (2);
insert into t1 values (1);
insert into t1 values (3);
insert into t1 values (4);
SELECT group_concat(num) FROM (SELECT num FROM t1 ORDER BY num DESC);

SELECT group_concat(num) FROM (SELECT num FROM t1 ORDER BY num);

SELECT group_concat(num) FROM (SELECT num FROM t1);

SELECT group_concat(num) FROM (SELECT num FROM t1 ORDER BY rowid DESC);

-- ===tkt3080.test===
SELECT execsql('CREATE TABLE t1(x)');

SELECT * FROM t2;

SELECT name FROM sqlite_master;

INSERT INTO t1 VALUES('CREATE TABLE t2(y);');
SELECT execsql(x) FROM t1;

SELECT name FROM sqlite_master;

INSERT INTO t1 VALUES('CREATE TABLE t3(z); DROP TABLE t3;');

SELECT name FROM sqlite_master;

DELETE FROM t1;
INSERT INTO t1 VALUES(sql);

SELECT execsql(x) FROM t1;

SELECT name FROM sqlite_master;

-- ===tkt3093.test===
CREATE TABLE t1(x);
INSERT INTO t1 VALUES(1);
SELECT * FROM t1;

BEGIN;
INSERT INTO t1 VALUES(2);

SELECT * FROM t1;

-- ===tkt3121.test===
PRAGMA encoding = 'utf16';
CREATE TABLE r1(field);
CREATE TABLE r2(col PRIMARY KEY, descr);
INSERT INTO r1 VALUES('abcd');
INSERT INTO r2 VALUES('abcd', 'A nice description');
INSERT INTO r2 VALUES('efgh', 'Another description');
CREATE VIRTUAL TABLE t1 USING echo(r1);
CREATE VIRTUAL TABLE t2 USING echo(r2);

select
t1.field as Field,
t2.descr as Descr
from t1 inner join t2 on t1.field = t2.col order by t1.field;

-- ===tkt3201.test===
CREATE TABLE t1(a INTEGER PRIMARY KEY, b TEXT);
INSERT INTO t1 VALUES(1, 'one');
INSERT INTO t1 VALUES(2, 'two');

SELECT a, b, c, d FROM t1, t3;

SELECT a, b, c, d FROM t1, t3 WHERE a < c;

CREATE TABLE t4(x);
CREATE TABLE t4_log(x);
CREATE TRIGGER r4_1 AFTER INSERT ON t4 WHEN new.x=1 BEGIN
INSERT INTO t4_log(x) VALUES(new.x);
END;
CREATE TRIGGER r4_2 AFTER INSERT ON t4 WHEN new.x=2 BEGIN
INSERT INTO t4_log(x) VALUES(new.x);
END;
CREATE TRIGGER r4_3 AFTER INSERT ON t4 WHEN new.x=3 BEGIN
INSERT INTO t4_log(x) VALUES(new.x);
END;
CREATE TRIGGER r4_4 AFTER INSERT ON t4 WHEN new.x=4 BEGIN
INSERT INTO t4_log(x) VALUES(new.x);
END;
INSERT INTO t4 VALUES(1);
INSERT INTO t4 VALUES(2);
INSERT INTO t4 VALUES(3);
INSERT INTO t4 VALUES(4);
SELECT * FROM t4_log;

SELECT l.a, r.a FROM t1 AS l, t1 AS r WHERE l.a < r.a;

CREATE TABLE t2(a INTEGER PRIMARY KEY, b TEXT);
INSERT INTO t2 VALUES(2, 'two');

SELECT l.a, r.a FROM t1 AS l, t2 AS r WHERE l.a < r.a;

DELETE FROM t1 WHERE a = 2;

SELECT l.a, r.a FROM t1 AS l, t2 AS r WHERE l.a < r.a;

DELETE FROM t1 WHERE a = 2;

SELECT t1.a, t1.b, t2.a, t2.b FROM t1, t2;

CREATE TABLE t3(c INTEGER PRIMARY KEY, d TEXT);
INSERT INTO t3 VALUES(2, 'two');

-- ===tkt3292.test===
PRAGMA legacy_file_format=OFF;
CREATE TABLE t1(a INTEGER PRIMARY KEY, b INT);
INSERT INTO t1 VALUES(0, 1);
INSERT INTO t1 VALUES(1, 1);
INSERT INTO t1 VALUES(2, 1);
CREATE INDEX i1 ON t1(b);
SELECT * FROM t1 WHERE b>=1;

INSERT INTO t1 VALUES(3, 0);
INSERT INTO t1 VALUES(4, 2);
SELECT * FROM t1 WHERE b>=1;

CREATE TABLE t2(a INTEGER PRIMARY KEY, b, c, d);
INSERT INTO t2 VALUES(0, 1, 'hello', x'012345');
INSERT INTO t2 VALUES(1, 1, 'hello', x'012345');
INSERT INTO t2 VALUES(2, 1, 'hello', x'012345');
CREATE INDEX i2 ON t2(b,c,d);
SELECT a FROM t2 WHERE b=1 AND c='hello' AND d>=x'012345';

INSERT INTO t2 VALUES(3, 1, 'hello', x'012344');
INSERT INTO t2 VALUES(4, 1, 'hello', x'012346');
SELECT a FROM t2 WHERE b=1 AND c='hello' AND d>=x'012345';

-- ===tkt3298.test===
CREATE TABLE t1(a INTEGER PRIMARY KEY, b INT);
INSERT INTO t1 VALUES(0, 1);
INSERT INTO t1 VALUES(1, 1);
INSERT INTO t1 VALUES(2, 1);
CREATE VIEW v1 AS SELECT a AS x, b+1 AS y FROM t1;
CREATE TRIGGER r1 INSTEAD OF UPDATE ON v1
BEGIN
UPDATE t1 SET b=new.y-1 WHERE a=new.x;
END;
CREATE TRIGGER r2 INSTEAD OF DELETE ON v1
BEGIN
DELETE FROM t1 WHERE a=old.x;
END;
SELECT * FROM v1 ORDER BY x;

UPDATE v1 SET y=3 WHERE x=0;
SELECT * FROM v1 ORDER by x;

UPDATE v1 SET y=4 WHERE v1.x=2;
SELECT * FROM v1 ORDER by x;

DELETE FROM v1 WHERE x=1;
SELECT * FROM v1 ORDER BY x;

DELETE FROM v1 WHERE v1.x=2;
SELECT * FROM v1 ORDER BY x;

CREATE TABLE t2(p,q);
INSERT INTO t2 VALUES(1,11);
INSERT INTO t2 VALUES(2,22);
CREATE TABLE t3(x,y);
INSERT INTO t3 VALUES(1,'one');
SELECT *, (SELECT z FROM (SELECT y AS z FROM t3 WHERE x=t1.a+1) ) FROM t1;

-- ===tkt3334.test===
CREATE TABLE t1(a,b);
INSERT INTO t1 VALUES(1,934);
INSERT INTO t1 VALUES(2,221);
INSERT INTO t1 VALUES(1,372);
INSERT INTO t1 VALUES(3,552);
INSERT INTO t1 VALUES(1,719);
INSERT INTO t1 VALUES(4,102);
SELECT * FROM t1 ORDER BY b;

SELECT a FROM (SELECT a FROM t1) WHERE a=1;

SELECT count(*) FROM (SELECT a FROM t1) WHERE a=1;

SELECT a FROM (SELECT a FROM t1 ORDER BY b LIMIT 2) WHERE a=1;

SELECT count(*) FROM (SELECT a FROM t1 ORDER BY b LIMIT 2) WHERE a=1;

SELECT a FROM (SELECT a FROM t1 ORDER BY b LIMIT 3) WHERE a=1;

SELECT count(*) FROM (SELECT a FROM t1 ORDER BY b LIMIT 3) WHERE a=1;

SELECT a FROM (SELECT a FROM t1 ORDER BY b LIMIT 99) WHERE a=1;

SELECT count(*) FROM (SELECT a FROM t1 ORDER BY b LIMIT 99) WHERE a=1;

SELECT a FROM (SELECT a FROM t1 ORDER BY b) WHERE a=1;

SELECT count(*) FROM (SELECT a FROM t1 ORDER BY b) WHERE a=1;

-- ===tkt3346.test===
CREATE TABLE t1(a,b);
INSERT INTO t1 VALUES(2,'bob');
INSERT INTO t1 VALUES(1,'alice');
INSERT INTO t1 VALUES(3,'claire');
SELECT *, ( SELECT y FROM (SELECT x.b='alice' AS y) )
FROM ( SELECT * FROM t1 ) AS x;

SELECT b FROM (SELECT * FROM t1) AS x
WHERE (SELECT y FROM (SELECT x.b='alice' AS y))=0;

SELECT b FROM (SELECT * FROM t1 ORDER BY a) AS x
WHERE (SELECT y FROM (SELECT a||b y FROM t1 WHERE t1.b=x.b))=(x.a||x.b);

SELECT b FROM (SELECT * FROM t1 ORDER BY a) AS x
WHERE (SELECT y FROM (SELECT a||b y FROM t1 WHERE t1.b=x.b))=('2'||x.b);

-- ===tkt3357.test===
create table a(id integer primary key, b_id integer, myvalue varchar);
create table b(id integer primary key, bvalue varchar);
insert into a(b_id, myvalue) values(1,'Test');
insert into a(b_id, myvalue) values(1,'Test2');
insert into a(b_id, myvalue) values(1,'Test3');
insert into b(bvalue) values('btest');

SELECT cc.id, cc.b_id, cc.myvalue, dd.bvalue 
FROM (
SELECT DISTINCT a.id, a.b_id, a.myvalue FROM a
INNER JOIN b ON a.b_id = b.id WHERE b.bvalue = 'btest'
) cc
LEFT OUTER JOIN b dd ON cc.b_id = dd.id;

SELECT cc.id, cc.b_id, cc.myvalue
FROM (
SELECT a.id, a.b_id, a.myvalue 
FROM a, b WHERE a.b_id = b.id
) cc
LEFT OUTER JOIN b dd ON cc.b_id = dd.id;

SELECT cc.id, cc.b_id, cc.myvalue
FROM (
SELECT DISTINCT a.id, a.b_id, a.myvalue 
FROM a, b WHERE a.b_id = b.id
) cc
LEFT OUTER JOIN b dd ON cc.b_id = dd.id;

-- ===tkt3419.test===
create table a(id integer primary key);
create table b(id integer primary key, a_id integer);
create table c(id integer primary key, b_id integer);
insert into a values (1);
insert into a values (2);
insert into b values (3, 1);
insert into b values (4, 1);
insert into b values (5, 1);
insert into b values (6, 1);
insert into b values (9, 2);
insert into c values (4, 3);
insert into c values (5, 5);
insert into c values (6, 4);
insert into c values (7, 6);
insert into c values (8, 9);
select * FROM a, b, c WHERE a.id=2 AND b.a_id = a.id AND b.id=c.b_id;

select * FROM a, c, b WHERE a.id=2 AND b.a_id = a.id AND b.id=c.b_id;

select * FROM b, a, c WHERE a.id=2 AND b.a_id = a.id AND b.id=c.b_id;

select * FROM b, c, a WHERE a.id=2 AND b.a_id = a.id AND b.id=c.b_id;

select * FROM c, a, b WHERE a.id=2 AND b.a_id = a.id AND b.id=c.b_id;

select * FROM c, b, a WHERE a.id=2 AND b.a_id = a.id AND b.id=c.b_id;

-- ===tkt3424.test===
CREATE TABLE names(id INTEGER, data TEXT, code TEXT);
INSERT INTO names VALUES(1,'E1','AAA');
INSERT INTO names VALUES(2,NULL,'BBB');
CREATE TABLE orig(code TEXT, data TEXT);
INSERT INTO orig VALUES('AAA','E1');
INSERT INTO orig VALUES('AAA','E2');
INSERT INTO orig VALUES('AAA','E3');
INSERT INTO orig VALUES('AAA','E4');
INSERT INTO orig VALUES('AAA','E5');

SELECT * FROM 
names LEFT OUTER JOIN orig
ON names.data = orig.data AND names.code = orig.code;

CREATE INDEX udx_orig_code_data ON orig(code, data);

SELECT * FROM 
names LEFT OUTER JOIN orig
ON names.data = orig.data AND names.code = orig.code;

-- ===tkt3442.test===
CREATE TABLE listhash(
key INTEGER PRIMARY KEY,
id TEXT,
node INTEGER
);
CREATE UNIQUE INDEX ididx ON listhash(id);

EXPLAIN QUERY PLAN select * from mu;

-- ===tkt3457.test===
CREATE TABLE t1(a, b, c);
INSERT INTO t1 VALUES(1, 2, 3);
BEGIN;
INSERT INTO t1 VALUES(4, 5, 6);

-- ===tkt3461.test===
CREATE TABLE t1(a, b);
INSERT INTO t1 VALUES(1, 2);

SELECT a, b+1 AS b_plus_one FROM t1 WHERE a=1;

PRAGMA vdbe_trace = 1; PRAGMA vdbe_listing=1;

SELECT a, b+1 AS b_plus_one FROM t1 WHERE a=1 OR b_plus_one;

SELECT a, b+1 AS b_plus_one 
FROM t1 
WHERE CASE WHEN a=1 THEN 1 ELSE b_plus_one END;

CREATE TABLE t2(c, d);
INSERT INTO t2 VALUES(3, 4);

PRAGMA vdbe_trace = 1; PRAGMA vdbe_listing=1;

SELECT a, b+1 AS b_plus_one, c, d 
FROM t1 LEFT JOIN t2 
ON (a=c AND d=b_plus_one);

-- ===tkt3493.test===
BEGIN;
CREATE TABLE A (id INTEGER PRIMARY KEY AUTOINCREMENT, val TEXT);
INSERT INTO A VALUES(1,'123');
INSERT INTO A VALUES(2,'456');
CREATE TABLE B (id INTEGER PRIMARY KEY AUTOINCREMENT, val TEXT);
INSERT INTO B VALUES(1,1);
INSERT INTO B VALUES(2,2);
CREATE TABLE A_B (B_id INTEGER NOT NULL, A_id INTEGER);
INSERT INTO A_B VALUES(1,1);
INSERT INTO A_B VALUES(2,2);
COMMIT;

SELECT a='123' FROM t1;

SELECT count(*), a=123 FROM t1;

SELECT count(*), +a=123 FROM t1;

SELECT b='456' FROM t1 GROUP BY a;

SELECT b='456' FROM t1 GROUP BY b;

SELECT b='456' FROM t1;

SELECT typeof(a), a FROM t1 GROUP BY a HAVING a=123;

SELECT typeof(a), a FROM t1 GROUP BY b HAVING a=123;

SELECT typeof(b), b FROM t1 GROUP BY a HAVING b='456';

SELECT typeof(b), b FROM t1 GROUP BY b HAVING b='456';

SELECT 
CASE 
WHEN B.val = 1 THEN 'XYZ' 
ELSE A.val 
END AS Col1
FROM B  
LEFT OUTER JOIN A_B ON B.id = A_B.B_id  
LEFT OUTER JOIN A ON A.id = A_B.A_id
ORDER BY Col1 ASC;

CREATE TABLE t2(a COLLATE NOCASE, b COLLATE BINARY);
INSERT INTO t2 VALUES('aBc', 'DeF');

SELECT a='abc' FROM t2 GROUP BY a;

SELECT a='abc' FROM t2;

SELECT a>b FROM t2 GROUP BY a, b;

SELECT a>b COLLATE BINARY FROM t2 GROUP BY a, b;

SELECT b>a FROM t2 GROUP BY a, b;

SELECT b>a COLLATE NOCASE FROM t2 GROUP BY a, b;

SELECT DISTINCT
CASE 
WHEN B.val = 1 THEN 'XYZ' 
ELSE A.val 
END AS Col1
FROM B  
LEFT OUTER JOIN A_B ON B.id = A_B.B_id  
LEFT OUTER JOIN A ON A.id = A_B.A_id
ORDER BY Col1 ASC;

SELECT b.val, CASE WHEN b.val = 1 THEN 'xyz' ELSE b.val END AS col1 FROM b;

SELECT DISTINCT 
b.val, 
CASE WHEN b.val = 1 THEN 'xyz' ELSE b.val END AS col1 
FROM b;

SELECT DISTINCT 
b.val, 
CASE WHEN b.val = '1' THEN 'xyz' ELSE b.val END AS col1 
FROM b;

CREATE TABLE t1(a TEXT, b INT);
INSERT INTO t1 VALUES(123, 456);

SELECT a=123 FROM t1 GROUP BY a;

SELECT a=123 FROM t1;

-- ===tkt3522.test===
CREATE TABLE tab4(
col0 INTEGER,
col1 INTEGER,
col2 INTEGER,
col3 INTEGER,
col4 INTEGER
);
SELECT cor1.*
FROM tab4 AS cor0
JOIN tab4 AS cor1 USING ( col4, col3, col2, col1, col0 );

CREATE TABLE tab1(col0 INTEGER);
CREATE TABLE tab2(col0 INTEGER);
SELECT cor0.* FROM tab1 NATURAL JOIN tab2 AS cor0;

-- ===tkt3527.test===
CREATE TABLE Element (
Code INTEGER PRIMARY KEY,
Name VARCHAR(60)
);
CREATE TABLE ElemOr (
CodeOr INTEGER NOT NULL,
Code INTEGER NOT NULL,
PRIMARY KEY(CodeOr,Code)
);
CREATE TABLE ElemAnd (
CodeAnd INTEGER,
Code INTEGER,
Attr1 INTEGER,
Attr2 INTEGER,
Attr3 INTEGER,
PRIMARY KEY(CodeAnd,Code)
);
INSERT INTO Element VALUES(1,'Elem1');
INSERT INTO Element VALUES(2,'Elem2');
INSERT INTO Element VALUES(3,'Elem3');
INSERT INTO Element VALUES(4,'Elem4');
INSERT INTO Element VALUES(5,'Elem5');
INSERT INTO ElemOr Values(3,4);
INSERT INTO ElemOr Values(3,5);
INSERT INTO ElemAnd VALUES(1,3,1,1,1);
INSERT INTO ElemAnd VALUES(1,2,1,1,1);
CREATE VIEW ElemView1 AS
SELECT
CAST(Element.Code AS VARCHAR(50)) AS ElemId,
Element.Code AS ElemCode,
Element.Name AS ElemName,
ElemAnd.Code AS InnerCode,
ElemAnd.Attr1 AS Attr1,
ElemAnd.Attr2 AS Attr2,
ElemAnd.Attr3 AS Attr3,
0 AS Level,
0 AS IsOrElem
FROM Element JOIN ElemAnd ON ElemAnd.CodeAnd=Element.Code
WHERE ElemAnd.CodeAnd NOT IN (SELECT CodeOr FROM ElemOr)
UNION ALL
SELECT
CAST(ElemOr.CodeOr AS VARCHAR(50)) AS ElemId,
Element.Code AS ElemCode,
Element.Name AS ElemName,
ElemOr.Code AS InnerCode,
NULL AS Attr1,
NULL AS Attr2,
NULL AS Attr3,
0 AS Level,
1 AS IsOrElem
FROM ElemOr JOIN Element ON Element.Code=ElemOr.CodeOr
ORDER BY ElemId, InnerCode;
CREATE VIEW ElemView2 AS
SELECT
ElemId,
ElemCode,
ElemName,
InnerCode,
Attr1,
Attr2,
Attr3,
Level,
IsOrElem
FROM ElemView1
UNION ALL
SELECT
Element.ElemId || '.' || InnerElem.ElemId AS ElemId,
InnerElem.ElemCode,
InnerElem.ElemName,
InnerElem.InnerCode,
InnerElem.Attr1,
InnerElem.Attr2,
InnerElem.Attr3,
InnerElem.Level+1,
InnerElem.IsOrElem
FROM ElemView1 AS Element
JOIN ElemView1 AS InnerElem
ON Element.Level=0 AND Element.InnerCode=InnerElem.ElemCode
ORDER BY ElemId, InnerCode;
SELECT * FROM ElemView1;

SELECT * FROM ElemView2;

-- ===tkt3541.test===
CREATE TABLE t1(x);
INSERT INTO t1 VALUES(123);
SELECT CASE ~max(x) WHEN min(x) THEN 1 ELSE max(x) END FROM t1;

SELECT CASE NOT max(x) WHEN min(x) THEN 1 ELSE max(x) END FROM t1;

-- ===tkt3554.test===
CREATE TABLE test ( obj, t1, t2, PRIMARY KEY(obj, t1, t2) );
CREATE TRIGGER test_insert BEFORE INSERT ON test BEGIN
UPDATE test SET t1 = new.t1 
WHERE obj = new.obj AND new.t1 < t1 AND new.t2 >= t1;
UPDATE test SET t2 = new.t2 
WHERE obj = new.obj AND new.t2 > t2 AND new.t1 <= t2;
SELECT RAISE(IGNORE) WHERE EXISTS (
SELECT obj FROM test 
WHERE obj = new.obj AND new.t1 >= t1 AND new.t2 <= t2
);
END;

INSERT INTO test VALUES('a', 10000, 11000);
SELECT * FROM test;

INSERT INTO test VALUES('a', 9000, 10500);

SELECT * FROM test;

INSERT INTO test VALUES('a', 10000, 12000);

SELECT * FROM test;

-- ===tkt3581.test===
CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);
INSERT INTO t1 VALUES(0,544,846);
INSERT INTO t1 VALUES(1,345,51);
CREATE TABLE t2(a INTEGER PRIMARY KEY, b, c);
INSERT INTO t2 SELECT * FROM t1;
CREATE INDEX i2 on t2(c);

SELECT a FROM t1
WHERE (b > 45 AND c < 356)
OR b <= 733
OR b >= 557
OR (b >= 614 AND c < 251)
ORDER BY b;

SELECT a FROM t2
WHERE (b > 45 AND c < 356)
OR b <= 733
OR b >= 557
OR (b >= 614 AND c < 251)
ORDER BY b;

-- ===tkt35xx.test===
PRAGMA auto_vacuum = 0;
PRAGMA page_size = 1024;

PRAGMA auto_vacuum = 0;
CREATE TABLE t1(a,b,c);
CREATE INDEX i1 ON t1(c);
INSERT INTO t1 VALUES(0, 0, zeroblob(676));
INSERT INTO t1 VALUES(1, 1, zeroblob(676));
DELETE FROM t1;
BEGIN;
INSERT INTO t1 VALUES(0, 0, zeroblob(676));
INSERT INTO t1 VALUES(1, 1, zeroblob(676));
ROLLBACK;
INSERT INTO t1 VALUES(0, 0, zeroblob(676));

INSERT INTO t1 VALUES(1, 1, zeroblob(676));

PRAGMA auto_vacuum = 0;
PRAGMA page_size = 1024;
CREATE TABLE t3(a INTEGER PRIMARY KEY, b);
INSERT INTO t3 VALUES(1, big);
INSERT INTO t3 VALUES(2, big);
INSERT INTO t3 VALUES(3, big);
INSERT INTO t3 VALUES(4, big);
CREATE TABLE t4(c, d);
INSERT INTO t4 VALUES(5, big);
INSERT INTO t4 VALUES(1, big);

SELECT count(*) FROM t3;

INSERT INTO t3 VALUES(5, big);
COMMIT;

SELECT count(*) FROM t3;

-- ===tkt3630.test===
CREATE TEMP TABLE temp1(a,b,c);
SELECT * FROM sqlite_temp_master WHERE sql GLOB '*TEMP*';

CREATE TABLE main1(a,b,c);
CREATE TEMP TABLE temp2 AS SELECT * FROM main1;
SELECT * FROM sqlite_temp_master WHERE sql GLOB '*TEMP*';

ALTER TABLE temp2 ADD COLUMN d;
ALTER TABLE temp2 RENAME TO temp2rn;
SELECT name FROM sqlite_temp_master WHERE name LIKE 'temp2%';

-- ===tkt3718.test===
CREATE TABLE t1(a PRIMARY KEY, b);
INSERT INTO t1 VALUES(1, 'one');
INSERT INTO t1 VALUES(2, 'two');
INSERT INTO t1 VALUES(3, 'three');
INSERT INTO t1 VALUES(4, 'four');
INSERT INTO t1 VALUES(5, 'five');
CREATE TABLE t2(a PRIMARY KEY, b);

SELECT sql(1, 'DELETE FROM t2 WHERE a = '||a ) FROM t2 WHERE a>5;

SELECT a from t2;

DELETE FROM t2 WHERE a > 5;
BEGIN;
INSERT INTO t2 SELECT a+5, sql(a==3,
'INSERT INTO t2 SELECT a+10, f2(b) FROM t1'
) FROM t1;

COMMIT;
SELECT a FROM t2;

DELETE FROM t2 WHERE a > 5;
BEGIN;
INSERT INTO t2 SELECT a+5, sql(a==3,
'INSERT INTO t2 SELECT a+10, b FROM t1'
) FROM t1;
COMMIT;

SELECT a FROM t2 ORDER BY a+0;

DELETE FROM t2;
INSERT INTO t2 SELECT a+5, b FROM t1;
INSERT INTO t2 SELECT a+15, b FROM t1;

COMMIT;

SELECT a FROM t2 ORDER BY a+0;

DELETE FROM t2;
INSERT INTO t2 SELECT a+5, b FROM t1;
INSERT INTO t2 SELECT a+15, b FROM t1;
INSERT INTO t2 SELECT a+25, b FROM t1;

SELECT f2(a);

COMMIT;

SELECT a FROM t2 WHERE (a%5)==0 ORDER BY a+0;

SELECT 
(SELECT sum(a) FROM t2)==(SELECT sum(a*5-10) FROM t2 WHERE (a%5)==0);

BEGIN;
INSERT INTO t2 SELECT a, b FROM t1;
INSERT INTO t2 SELECT a+5, f1(b) FROM t1;
COMMIT;

SELECT a FROM t2;

DELETE FROM t2 WHERE a > 5;
PRAGMA count_changes = 1;
BEGIN;

INSERT INTO t2 SELECT a+5, b||'+5' FROM t1;

SELECT f2('three');

COMMIT;
SELECT a FROM t2;

pragma count_changes=0;

-- ===tkt3731.test===
CREATE TABLE t1(a PRIMARY KEY, b);
CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN
INSERT INTO t1 VALUES(new.a || '+', new.b || '+');
END;

INSERT INTO t1 VALUES('a', 'b');
INSERT INTO t1 VALUES('c', 'd');
SELECT * FROM t1;

DELETE FROM t1;
CREATE TABLE t2(a, b);
INSERT INTO t2 VALUES('e', 'f');
INSERT INTO t2 VALUES('g', 'h');
INSERT INTO t1 SELECT * FROM t2;
SELECT * FROM t1;

-- ===tkt3757.test===
CREATE TABLE t1(x INTEGER, y INTEGER, z TEXT);
CREATE INDEX t1i1 ON t1(y,z);
INSERT INTO t1 VALUES(1,2,'three');
CREATE TABLE t2(a INTEGER, b TEXT);
INSERT INTO t2 VALUES(2, 'two');
ANALYZE;
SELECT * FROM sqlite_stat1 ORDER BY 1, 2;

DELETE FROM sqlite_stat1;
INSERT INTO sqlite_stat1 VALUES('t1','t1i1','250000 50000 30');

-- ===tkt3761.test===
PRAGMA auto_vacuum=INCREMENTAL;
CREATE TABLE t1(x);
INSERT INTO t1 VALUES(zeroblob(900));
INSERT INTO t1 VALUES(zeroblob(900));
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
BEGIN;
DELETE FROM t1 WHERE rowid%2;
PRAGMA incremental_vacuum(4);
ROLLBACK;

PRAGMA integrity_check;

-- ===tkt3762.test===
PRAGMA auto_vacuum=INCREMENTAL;
PRAGMA page_size=1024;
PRAGMA cache_size=10;
CREATE TABLE t1(x);
INSERT INTO t1 VALUES(zeroblob(900));
INSERT INTO t1 VALUES(zeroblob(900));
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
INSERT INTO t1 SELECT x FROM t1;
DELETE FROM t1 WHERE rowid>202;
VACUUM;
BEGIN;
DELETE FROM t1 WHERE rowid IN (10,11,12) ;
PRAGMA incremental_vacuum(10);
UPDATE t1 SET x=zeroblob(900) WHERE rowid BETWEEN 100 AND 110;
INSERT INTO t1 VALUES(zeroblob(39000));
SELECT count(*) FROM t1;
ROLLBACK;

PRAGMA integrity_check;

-- ===tkt3773.test===
CREATE TABLE t1(a,b);
INSERT INTO t1 VALUES(2,1);
INSERT INTO t1 VALUES(33,3);
CREATE TABLE t2(x,y);
INSERT INTO t2 VALUES(123,2);
INSERT INTO t2 VALUES(4,4);
SELECT a FROM (
SELECT a, b FROM t1
UNION ALL
SELECT x, y FROM t2
ORDER BY 2
);

-- ===tkt3791.test===
CREATE TABLE t1(x, y DEFAULT(datetime('now')));
INSERT INTO t1(x) VALUES(1);
SELECT x, length(y) FROM t1;

-- ===tkt3793.test===
BEGIN;
CREATE TABLE t1(a, b);
CREATE TABLE t2(a PRIMARY KEY, b);
INSERT INTO t1 VALUES(randstr(50,50), randstr(50,50));
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t1 SELECT randstr(50,50), randstr(50,50) FROM t1;
INSERT INTO t2 SELECT * FROM t1;
COMMIT;

BEGIN;
SELECT count(*) FROM t1;

PRAGMA cache_size = 10;
BEGIN;
UPDATE t1 SET b = randstr(50,50);

-- ===tkt3810.test===
CREATE TABLE t1(x);
INSERT INTO t1 VALUES(123);
SELECT * FROM t1;
CREATE TABLE t2(y);
CREATE TABLE t3(z);

SELECT * FROM t1;

DROP TABLE t1;

CREATE TEMP TRIGGER r1 AFTER INSERT ON t1 BEGIN
INSERT INTO t2 VALUES(new.rowid);
END;

SELECT name FROM sqlite_temp_master ORDER BY name;

CREATE TABLE t1(x);

DROP TABLE t1;

SELECT name FROM sqlite_temp_master;

-- ===tkt3824.test===
CREATE TABLE t1(a,b);
INSERT INTO t1 VALUES(1,NULL);
INSERT INTO t1 VALUES(9,NULL);
INSERT INTO t1 VALUES(5,NULL);
INSERT INTO t1 VALUES(123,NULL);
INSERT INTO t1 VALUES(-10,NULL);
CREATE UNIQUE INDEX t1b ON t1(b);

CREATE TABLE t2(a,b,c);
INSERT INTO t2 VALUES(1,1,NULL);
INSERT INTO t2 VALUES(9,2,NULL);
INSERT INTO t2 VALUES(5,2,NULL);
INSERT INTO t2 VALUES(123,3,NULL);
INSERT INTO t2 VALUES(-10,3,NULL);
CREATE UNIQUE INDEX t2bc ON t2(b,c);

CREATE TABLE t3(x,y);
INSERT INTO t3 SELECT a, b FROM t1;
INSERT INTO t3 VALUES(234,567);
CREATE UNIQUE INDEX t3y ON t3(y);
DELETE FROM t3 WHERE y IS NULL;
SELECT * FROM t3;

CREATE TABLE t4(x,y);
INSERT INTO t4 SELECT a, b FROM t1;
INSERT INTO t4 VALUES(234,567);
CREATE UNIQUE INDEX t4y ON t4(y);
UPDATE t4 SET rowid=rowid+100 WHERE y IS NULL;
SELECT rowid, x FROM t4 ORDER BY rowid;

-- ===tkt3832.test===
CREATE TABLE t1(a INT, b INTEGER PRIMARY KEY);
CREATE TABLE log(x);
CREATE TRIGGER t1r1 BEFORE INSERT ON t1 BEGIN
INSERT INTO log VALUES(new.b);
END;
INSERT INTO t1 VALUES(NULL,5);
INSERT INTO t1 SELECT b, a FROM t1 ORDER BY b;
SELECT rowid, * FROM t1;
SELECT rowid, * FROM log;

-- ===tkt3838.test===
PRAGMA encoding=UTF16;
CREATE TABLE t1(x);
INSERT INTO t1 VALUES(1);
ALTER TABLE t1 ADD COLUMN b INTEGER DEFAULT '999';
ALTER TABLE t1 ADD COLUMN c REAL DEFAULT '9e99';
ALTER TABLE t1 ADD COLUMN d TEXT DEFAULT 'xyzzy';
UPDATE t1 SET x=x+1;
SELECT * FROM t1;

-- ===tkt3841.test===
CREATE TABLE table2 (key TEXT, x TEXT);
CREATE TABLE list (key TEXT, value TEXT);
INSERT INTO table2 VALUES ("a", "alist");
INSERT INTO table2 VALUES ("b", "blist");
INSERT INTO list VALUES ("a", 1);
INSERT INTO list VALUES ("a", 2);
INSERT INTO list VALUES ("a", 3);
INSERT INTO list VALUES ("b", 4);
INSERT INTO list VALUES ("b", 5);
INSERT INTO list VALUES ("b", 6);
SELECT
table2.x,
(SELECT group_concat(list.value)
FROM list
WHERE list.key = table2.key)
FROM table2;

-- ===tkt3871.test===
BEGIN;
CREATE TABLE t1(a PRIMARY KEY, b UNIQUE);

INSERT INTO t1 VALUES(i, i*i);

CREATE VIRTUAL TABLE e USING echo(t1);
SELECT count(*) FROM e;

SELECT * FROM e WHERE a = 1 OR a = 2;

SELECT * FROM e WHERE a = 1 OR a = 2;

SELECT * FROM e WHERE a = 1 OR a = 2 OR b = 9;

SELECT * FROM e WHERE a = 1 OR a = 2 OR b = 9;

-- ===tkt3879.test===
CREATE TABLE t1 (a PRIMARY KEY, b);
INSERT INTO t1 VALUES ('w',  1);
INSERT INTO t1 VALUES ('z', -1);
CREATE TABLE t2 (m INTEGER PRIMARY KEY, n, a, p);
INSERT INTO t2 VALUES (25, 13, 'w', 1);
INSERT INTO t2 VALUES (26, 25, 'z', 153);
INSERT INTO t2 VALUES (27, 25, 'z', 68);
CREATE TABLE t3 (m);
INSERT INTO t3 VALUES (25);

SELECT 111, t1.b*123
FROM t3, t2 AS j0, t2 AS j1, t1
WHERE j0.m=t3.m AND t1.a=j0.a AND j1.n=j0.m;

SELECT 222, t1.b*123
FROM t3, t2 AS j0, t2 AS j1, t1
WHERE j0.m=t3.m AND t1.a=j0.a AND j1.n=j0.m
ORDER BY t1.b;

-- ===tkt3911.test===
CREATE TABLE t1(a,b);
INSERT INTO t1 VALUES(1,2);
INSERT INTO t1 VALUES(11,12);
CREATE TABLE t2(b,c);
INSERT INTO t2 VALUES(2,3);
INSERT INTO t2 VALUES(22,23);
SELECT * FROM t1 JOIN t2 USING(b);

SELECT * FROM t1 JOIN (t2) AS x USING (b);

SELECT * FROM t1 JOIN (SELECT * FROM t2) AS x USING (b);

CREATE TABLE t3(m,a);
INSERT INTO t3 VALUES('one',1);
INSERT INTO t3 VALUES('two',2);
SELECT * FROM t3 JOIN (SELECT * FROM t1 NATURAL JOIN t2) AS x USING(a);

SELECT * FROM t3 JOIN (SELECT * FROM t1 JOIN t2 USING (b)) AS x USING(a);

-- ===tkt3918.test===
PRAGMA page_size = 1024;
PRAGMA auto_vacuum = incremental;
CREATE TABLE t1(i, x);

INSERT INTO t1 VALUES(1, randstr(1000,1000));
INSERT INTO t1 VALUES(2, zeroblob(248*1020 + 100));
INSERT INTO t1 VALUES(3, zeroblob(2*1020 + 100));

DELETE FROM t1 WHERE i = 2;
DELETE FROM t1 WHERE i = 1;
DELETE FROM t1 WHERE i = 3;

PRAGMA incremental_vacuum = 1;

CREATE TABLE t2(a, b);

-- ===tkt3922.test===
CREATE TABLE t1(a NUMBER);
INSERT INTO t1 VALUES('-9223372036854775808');
SELECT a, typeof(a) FROM t1;

CREATE TABLE t1(a NUMBER);
INSERT INTO t1 VALUES('-1');
SELECT a, typeof(a) FROM t1;

DELETE FROM t1;
INSERT INTO t1 VALUES('-9223372036854775809');
SELECT a, typeof(a) FROM t1;

DELETE FROM t1;
INSERT INTO t1 VALUES('-9223372036854776832');
SELECT a, typeof(a) FROM t1;

DELETE FROM t1;
INSERT INTO t1 VALUES('-9223372036854776833');
SELECT a, typeof(a) FROM t1;

DELETE FROM t1;
INSERT INTO t1 VALUES('9223372036854775807');
SELECT a, typeof(a) FROM t1;

DELETE FROM t1;
INSERT INTO t1 VALUES('1');
SELECT a, typeof(a) FROM t1;

DELETE FROM t1;
INSERT INTO t1 VALUES('9223372036854775808');
SELECT a, typeof(a) FROM t1;

-- ===tkt3929.test===
PRAGMA page_size = 1024;
CREATE TABLE t1(a, b);
CREATE INDEX i1 ON t1(a, b);
CREATE TRIGGER t1_t1 AFTER INSERT ON t1 BEGIN
UPDATE t1 SET b = 'value: ' || a WHERE t1.rowid = new.rowid;
END;

INSERT INTO t1(a) VALUES(1);
INSERT INTO t1(a) VALUES(2);
SELECT * FROM t1;

INSERT INTO t1(a) VALUES(i);

-- ===tkt3935.test===
CREATE TABLE t1(a, b);
CREATE TABLE t2(c, d);

SELECT j1.b FROM ( SELECT * FROM t1 INNER JOIN t2 ON a=c ) AS j1;

-- ===tkt3992.test===
CREATE TABLE parameters1(
mountcnt    INT NOT NULL CHECK (typeof(mountcnt) == 'integer'),
version     REAL NOT NULL
);
INSERT INTO parameters1(mountcnt, version) VALUES(1, 1.0);
CREATE TABLE parameters2(
mountcnt    INT NOT NULL CHECK (typeof(mountcnt) == 'integer'),
version     REAL CHECK (typeof(version) == 'real')
);
INSERT INTO parameters2(mountcnt, version) VALUES(1, 1.0);

UPDATE parameters1 SET mountcnt = mountcnt + 1;
SELECT * FROM parameters1;

UPDATE parameters2 SET mountcnt = mountcnt + 1;
SELECT * FROM parameters2;

CREATE TABLE t1(a, b);
INSERT INTO t1 VALUES(1, 2);
ALTER TABLE t1 ADD COLUMN c DEFAULT 3;
SELECT * FROM t1;

UPDATE t1 SET a = 'one';
SELECT * FROM t1;

CREATE TABLE t2(a REAL, b REAL, c REAL);
INSERT INTO t2 VALUES(1, 2, 3);
CREATE TRIGGER tr2 BEFORE UPDATE ON t2 BEGIN
SELECT tcl('set res', typeof(new.c));
END;
UPDATE t2 SET a = 'I';

-- ===tkt3997.test===
create table mytext(name BLOB);
INSERT INTO mytext VALUES('abc');
INSERT INTO mytext VALUES('acd');
INSERT INTO mytext VALUES('afe');

SELECT name 
FROM mytext 
ORDER BY name COLLATE reverse;

SELECT name 
FROM (SELECT name FROM mytext)  
ORDER BY name COLLATE reverse;

CREATE TABLE mytext2(name COLLATE reverse);
INSERT INTO mytext2 SELECT name FROM mytext;

SELECT name 
FROM (SELECT name FROM mytext2)  
ORDER BY name;

SELECT name 
FROM (SELECT name FROM mytext2)
ORDER BY name COLLATE usual;

-- ===tkt4018.test===
CREATE TABLE t1(a, b);
BEGIN;
SELECT * FROM t1;

INSERT INTO t1 VALUES(1, 2);

BEGIN;
SELECT * FROM t1 ORDER BY a;